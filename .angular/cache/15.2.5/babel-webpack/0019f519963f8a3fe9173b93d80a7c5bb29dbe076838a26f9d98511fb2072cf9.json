{"ast":null,"code":"import { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class LoginService {\n  constructor(httpClient, toastr, router) {\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.router = router;\n    this.url = Constants.BASE_URL + \"auth/\";\n  }\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    if (localdata != null || localdata != '') {\n      var json = JSON.parse(localdata ?? \"\");\n      var token = json[\"Token\"];\n      var refreshToken = json[\"RefreshToken\"];\n      var body = {\n        \"token\": token,\n        \"refreshToken\": refreshToken\n      };\n      this.httpClient.post(this.url + 'refresh-user', body, {\n        withCredentials: true\n      }).subscribe({\n        next: data => {\n          localStorage.setItem(\"data\", JSON.stringify(data));\n        },\n        error: error => {\n          localStorage.clear();\n          this.router.navigate(['/']);\n        }\n      });\n    }\n    try {} catch (error) {\n      localStorage.clear();\n      this.router.navigate(['/']);\n    }\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});\nlogin(form, any);\n{\n  console.log(form);\n  this.httpClient.post(this.url + 'login', form, {\n    withCredentials: true\n  }).subscribe({\n    next: data => {\n      localStorage.setItem(\"data\", JSON.stringify(data));\n      this.toastr.success('Successfully logged in!');\n      this.router.navigate(['/']);\n    },\n    error: error => {\n      console.log(error);\n      switch (error.status) {\n        case 400:\n          {\n            this.toastr.error(\"Nimadir xato!\");\n          }\n          break;\n        case 401:\n          this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\");\n          break;\n        case 0:\n          this.router.navigate(['/server-error']);\n          break;\n      }\n    }\n  });\n}","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,0BAA0B;;;;;AAKpD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,UAAsB,EACtBC,MAAqB,EACrBC,MAAc;IAFd,eAAU,GAAVF,UAAU;IACV,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IAJ1B,QAAG,GAAWL,SAAS,CAACM,QAAQ,GAAG,OAAO;EAIJ;EAEtCC,YAAY;IACZ,IAAIC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAIF,SAAS,IAAI,IAAI,IAAIA,SAAS,IAAI,EAAE,EAAE;MAClC,IAAIG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAE,EAAE,CAAC;MACpC,IAAIM,KAAK,GAAGH,IAAI,CAAC,OAAO,CAAC;MACzB,IAAIJ,YAAY,GAAGI,IAAI,CAAC,cAAc,CAAC;MACvC,IAAII,IAAI,GAAG;QACT,OAAO,EAAED,KAAK;QACd,cAAc,EAAEP;OACjB;MAED,IAAI,CAACJ,UAAU,CAACa,IAAI,CAAC,IAAI,CAACC,GAAG,GAAC,cAAc,EAAEF,IAAI,EAAE;QAACG,eAAe,EAAE;MAAI,CAAC,CAAC,CAACC,SAAS,CACpF;QAAEC,IAAI,EAAEC,IAAI,IAAG;UACXZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;QACtD,CAAC;QACDG,KAAK,EAAEA,KAAK,IAAG;UACbf,YAAY,CAACgB,KAAK,EAAE;UACpB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7B;MAAC,CAAC,CACL;;IAEH,MADC,CACD,OAAMF,KAAK,EAAE;MACXf,YAAY,CAACgB,KAAK,EAAE;MACpB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;EAE/B;;AAjCSzB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA0B,SAAZ1B,YAAY;EAAA2B,YAFX;AAAM;AAuClBC,KAAK,CAACC,IAAI,EAAEC,GAAG,CAAC;AAAC;EACfC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,IAAI,CAAC3B,UAAU,CAACa,IAAI,CAAC,IAAI,CAACC,GAAG,GAAE,OAAO,EAAEa,IAAI,EAAE;IAACZ,eAAe,EAAE;EAAI,CAAC,CAAC,CAACC,SAAS,CAC9E;IAAEC,IAAI,EAAEC,IAAI,IAAG;MACVZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;MAClD,IAAI,CAACjB,MAAM,CAAC8B,OAAO,CAAC,yBAAyB,CAAC;MAC9C,IAAI,CAAC7B,MAAM,CAACqB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IACDF,KAAK,EAAEA,KAAK,IAAG;MACbQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC;MAChB,QAAOA,KAAK,CAACW,MAAM;QACjB,KAAK,GAAG;UAAE;YACT,IAAI,CAAC/B,MAAM,CAACoB,KAAK,CAAC,eAAe,CAAC;;UAClC;QACD,KAAK,GAAG;UACR,IAAI,CAACpB,MAAM,CAACoB,KAAK,CAAC,gDAAgD,CAAC;UAAE;QACrE,KAAK,CAAC;UAAE,IAAI,CAACnB,MAAM,CAACqB,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;UAAE;MAAM;IAE7D;EAAC,CAAC,CACL","names":["Constants","LoginService","constructor","httpClient","toastr","router","BASE_URL","refreshToken","localdata","localStorage","getItem","json","JSON","parse","token","body","post","url","withCredentials","subscribe","next","data","setItem","stringify","error","clear","navigate","factory","providedIn","login","form","any","console","log","success","status"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\pages\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Constants } from 'src/app/models/Constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  url: string = Constants.BASE_URL + \"auth/\"\n\n  constructor(private httpClient: HttpClient,\n              private toastr: ToastrService,\n              private router: Router) { }\n\n  refreshToken() {\n  var localdata = localStorage.getItem('data');\n  if (localdata != null || localdata != '') {\n          var json = JSON.parse(localdata??\"\");\n          var token = json[\"Token\"];\n          var refreshToken = json[\"RefreshToken\"];\n          var body = {\n            \"token\": token,\n            \"refreshToken\": refreshToken\n          }\n\n          this.httpClient.post(this.url+'refresh-user', body, {withCredentials: true}).subscribe(\n            { next: data => {\n                localStorage.setItem(\"data\", JSON.stringify(data));\n            },\n            error: error => {\n              localStorage.clear();\n              this.router.navigate(['/']);\n            }}\n        );\n      }\n      catch(error) {\n        localStorage.clear();\n        this.router.navigate(['/']);\n      }\n    }\n  }\n\n\n  login(form: any) {\n    console.log(form);\n    this.httpClient.post(this.url +'login', form, {withCredentials: true}).subscribe(\n      { next: data => {\n           localStorage.setItem(\"data\", JSON.stringify(data));\n           this.toastr.success('Successfully logged in!');\n           this.router.navigate(['/']);\n       },\n       error: error => {\n         console.log(error);\n           switch(error.status) {\n             case 400: {\n              this.toastr.error(\"Nimadir xato!\");\n             }break;\n             case 401: \n             this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\"); break;\n             case 0: this.router.navigate(['/server-error']); break;\n           }\n       }}\n   );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}