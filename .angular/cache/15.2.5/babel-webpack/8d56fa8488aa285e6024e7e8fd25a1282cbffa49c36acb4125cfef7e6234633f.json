{"ast":null,"code":"import { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = Constants.BASE_URL + \"auth/\";\n  }\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    if (localdata != null) {\n      try {\n        var json = JSON.parse(localdata ?? \"\");\n        var token = json[\"Token\"];\n        var refreshToken = json[\"RefreshToken\"];\n        var body = {\n          \"token\": token,\n          \"refreshToken\": refreshToken\n        };\n        this.httpClient.post(this.url + 'refresh-user', body, {\n          withCredentials: true\n        }).subscribe({\n          next: data => {\n            localStorage.setItem(\"data\", JSON.stringify(data));\n            console.log(data);\n            return true;\n          },\n          error: error => {\n            console.log(error);\n            return false;\n            //  switch(error.status) {\n            //    case 500: {\n            //       return false;\n            //    }break;\n            //  }\n          }\n        });\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  login(form) {\n    this.httpClient.post(this.url + 'login', form, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        localStorage.setItem(\"data\", JSON.stringify(data));\n      },\n      error: error => {\n        const el = document.getElementById('error');\n        console.log(error);\n        switch (error.status) {\n          case 400:\n            {\n              var arr = error.error.errors;\n              el.innerHTML = \"\";\n              if (arr['Email']) {\n                el.innerHTML += arr['Email'] + '<br/>';\n              }\n              if (arr['Password']) {\n                el.innerHTML += arr['Password'] + '<br/>';\n              }\n            }\n            break;\n          case 401:\n            el.innerHTML = error.error;\n            break;\n        }\n      }\n    });\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,QAAQ,0BAA0B;;;AAKpD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAF9B,QAAG,GAAWH,SAAS,CAACI,QAAQ,GAAG,OAAO;EAEI;EAE9CC,YAAY;IACZ,IAAIC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAIF,SAAS,IAAI,IAAI,EAAE;MACrB,IAAI;QACA,IAAIG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAE,EAAE,CAAC;QACpC,IAAIM,KAAK,GAAGH,IAAI,CAAC,OAAO,CAAC;QACzB,IAAIJ,YAAY,GAAGI,IAAI,CAAC,cAAc,CAAC;QACvC,IAAII,IAAI,GAAG;UACT,OAAO,EAAED,KAAK;UACd,cAAc,EAAEP;SACjB;QAED,IAAI,CAACF,UAAU,CAACW,IAAI,CAAC,IAAI,CAACC,GAAG,GAAC,cAAc,EAAEF,IAAI,EAAE;UAACG,eAAe,EAAE;QAAI,CAAC,CAAC,CAACC,SAAS,CACpF;UAAEC,IAAI,EAAEC,IAAI,IAAG;YACXZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;YAChDG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;YACnB,OAAO,IAAI;UACf,CAAC;UACDK,KAAK,EAAEA,KAAK,IAAG;YACTF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;YAClB,OAAO,KAAK;YACd;YACA;YACA;YACA;YACA;UACJ;QAAC,CAAC,CACL;OACF,CACD,OAAMA,KAAK,EAAE;QACX,OAAO,KAAK;;;IAIf,OAAO,KAAK;EACb;EAGAC,KAAK,CAACC,IAAS;IACb,IAAI,CAACvB,UAAU,CAACW,IAAI,CAAC,IAAI,CAACC,GAAG,GAAE,OAAO,EAAEW,IAAI,EAAE;MAACV,eAAe,EAAE;IAAI,CAAC,CAAC,CAACC,SAAS,CAC9E;MAAEC,IAAI,EAAEC,IAAI,IAAG;QACVZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;MACtD,CAAC;MACDK,KAAK,EAAEA,KAAK,IAAG;QACb,MAAMG,EAAE,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAE;QAC5CP,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QAChB,QAAOA,KAAK,CAACM,MAAM;UACjB,KAAK,GAAG;YAAE;cACR,IAAIC,GAAG,GAAGP,KAAK,CAACA,KAAK,CAACQ,MAAM;cAC5BL,EAAE,CAACM,SAAS,GAAG,EAAE;cACjB,IAAIF,GAAG,CAAC,OAAO,CAAC,EAAE;gBAChBJ,EAAE,CAACM,SAAS,IAAIF,GAAG,CAAC,OAAO,CAAC,GAAG,OAAO;;cAExC,IAAIA,GAAG,CAAC,UAAU,CAAC,EAAE;gBACnBJ,EAAE,CAACM,SAAS,IAAIF,GAAG,CAAC,UAAU,CAAC,GAAG,OAAO;;;YAE5C;UACD,KAAK,GAAG;YAAEJ,EAAE,CAACM,SAAS,GAAGT,KAAK,CAACA,KAAK;YAAE;QAAM;MAElD;IAAC,CAAC,CACL;EACF;;AAnEWvB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAiC,SAAZjC,YAAY;EAAAkC,YAFX;AAAM","names":["Constants","LoginService","constructor","httpClient","BASE_URL","refreshToken","localdata","localStorage","getItem","json","JSON","parse","token","body","post","url","withCredentials","subscribe","next","data","setItem","stringify","console","log","error","login","form","el","document","getElementById","status","arr","errors","innerHTML","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\pages\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Constants } from 'src/app/models/Constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  url: string = Constants.BASE_URL + \"auth/\"\n\n  constructor(private httpClient: HttpClient) { }\n\n  refreshToken() {\n  var localdata = localStorage.getItem('data');\n  if (localdata != null) {\n    try {\n        var json = JSON.parse(localdata??\"\");\n        var token = json[\"Token\"];\n        var refreshToken = json[\"RefreshToken\"];\n        var body = {\n          \"token\": token,\n          \"refreshToken\": refreshToken\n        }\n\n        this.httpClient.post(this.url+'refresh-user', body, {withCredentials: true}).subscribe(\n          { next: data => {\n              localStorage.setItem(\"data\", JSON.stringify(data));\n                console.log(data)\n              return true;\n          },\n          error: error => {\n                console.log(error);\n                return false;\n              //  switch(error.status) {\n              //    case 500: {\n              //       return false;\n              //    }break;\n              //  }\n          }}\n      );\n    }\n    catch(error) {\n      return false;\n    }\n  }\n\n   return false;\n  }\n\n\n  login(form: any) {\n    this.httpClient.post(this.url +'login', form, {withCredentials: true}).subscribe(\n      { next: data => {\n           localStorage.setItem(\"data\", JSON.stringify(data));\n       },\n       error: error => {\n         const el = document.getElementById('error')!;\n         console.log(error);\n           switch(error.status) {\n             case 400: {\n               var arr = error.error.errors;\n               el.innerHTML = \"\";\n               if (arr['Email']) {\n                 el.innerHTML += arr['Email'] + '<br/>';\n               }\n               if (arr['Password']) {\n                 el.innerHTML += arr['Password'] + '<br/>';\n               }\n             }break;\n             case 401: el.innerHTML = error.error; break;\n           }\n       }}\n   );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}