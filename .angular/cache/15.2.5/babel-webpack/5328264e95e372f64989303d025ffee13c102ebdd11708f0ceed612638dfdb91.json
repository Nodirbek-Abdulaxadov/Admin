{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet NewWarehouseItemComponent = class NewWarehouseItemComponent {\n  constructor(formBuilder, warehouseService, productService, toastr) {\n    this.formBuilder = formBuilder;\n    this.warehouseService = warehouseService;\n    this.productService = productService;\n    this.toastr = toastr;\n    this.warehouses = [];\n    this.products = [];\n    this.selectedProduct = {\n      id: 0,\n      name: '',\n      description: '',\n      madeIn: '',\n      barcode: '',\n      warningCount: 0,\n      subcategoryId: 0,\n      subcategoryName: '',\n      categoryId: 0,\n      categoryName: '',\n      adminId: '',\n      adminFullName: '',\n      addedDate: new Date(),\n      modifiedDate: new Date()\n    };\n    this.quantity = new FormControl(0, [Validators.required]);\n    this.broughtDate = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.incomingPrice = new FormControl(0, [Validators.required]);\n    this.sellingPrice = new FormControl(0, [Validators.required]);\n    this.productId = new FormControl(0, [Validators.required, Validators.nullValidator]);\n    this.adminId = new FormControl('');\n    this.warehouseId = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.addNewForm = this.formBuilder.group({\n      quantity: this.quantity,\n      broughtDate: this.broughtDate,\n      incomingPrice: this.incomingPrice,\n      sellingPrice: this.sellingPrice,\n      productId: this.productId,\n      adminId: this.adminId,\n      warehouseId: this.warehouseId\n    });\n  }\n  ngOnInit() {\n    this.warehouseService.getAll().subscribe(data => {\n      this.warehouses = data;\n    });\n    this.productService.getAll().subscribe(data => this.products = data);\n  }\n  focusOnScan() {\n    var element = document.getElementById('barcodeInput');\n    element.focus();\n  }\n  scanned(event) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      var barcode = document.getElementById('barcodeInput');\n    }\n  }\n  add() {\n    this.productService.add(this.addNewForm.getRawValue());\n  }\n};\nNewWarehouseItemComponent = __decorate([Component({\n  selector: 'app-new-warehouse-item',\n  templateUrl: './new-warehouse-item.component.html',\n  styleUrls: ['./new-warehouse-item.component.css']\n})], NewWarehouseItemComponent);\nexport { NewWarehouseItemComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAY9D,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EACpCC,YACUC,WAAwB,EACxBC,gBAAkC,EAClCC,cAA8B,EAC9BC,MAAqB;IAHrB,gBAAW,GAAXH,WAAW;IACX,qBAAgB,GAAhBC,gBAAgB;IAChB,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IAGhB,eAAU,GAAgB,EAAE;IAC5B,aAAQ,GAAc,EAAE;IACxB,oBAAe,GAAY;MACzBC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC;MAChBC,eAAe,EAAE,EAAE;MACnBC,UAAU,EAAE,CAAC;MACbC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,YAAY,EAAE,IAAID,IAAI;KACvB;IASD,aAAQ,GAAG,IAAIrB,WAAW,CAAC,CAAC,EAAE,CAC5BC,UAAU,CAACsB,QAAQ,CACpB,CAAC;IAEF,gBAAW,GAAG,IAAIvB,WAAW,CAAC,EAAE,EAAE,CAChCC,UAAU,CAACsB,QAAQ,EACnBtB,UAAU,CAACuB,aAAa,CACzB,CAAC;IAEF,kBAAa,GAAG,IAAIxB,WAAW,CAAC,CAAC,EAAE,CACjCC,UAAU,CAACsB,QAAQ,CACpB,CAAC;IAEF,iBAAY,GAAG,IAAIvB,WAAW,CAAC,CAAC,EAAE,CAChCC,UAAU,CAACsB,QAAQ,CACpB,CAAC;IAEF,cAAS,GAAG,IAAIvB,WAAW,CAAC,CAAC,EAAE,CAC7BC,UAAU,CAACsB,QAAQ,EACnBtB,UAAU,CAACuB,aAAa,CACzB,CAAC;IAEF,YAAO,GAAG,IAAIxB,WAAW,CAAC,EAAE,CAAC;IAE7B,gBAAW,GAAG,IAAIA,WAAW,CAAC,EAAE,EAAE,CAChCC,UAAU,CAACsB,QAAQ,EACnBtB,UAAU,CAACuB,aAAa,CACzB,CAAC;IAEK,eAAU,GAAG,IAAI,CAACpB,WAAW,CAACqB,KAAK,CAAC;MACzCC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBZ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBa,WAAW,EAAE,IAAI,CAACA;KACnB,CAAC;EAjEC;EAqBHC,QAAQ;IACN,IAAI,CAAC3B,gBAAgB,CAAC4B,MAAM,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MAChD,IAAI,CAACC,UAAU,GAAGD,IAAI;IACxB,CAAC,CAAC;IACF,IAAI,CAAC7B,cAAc,CAAC2B,MAAM,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAK,IAAI,CAACE,QAAQ,GAAGF,IAAI,CAAC;EACxE;EAyCAG,WAAW;IACT,IAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAqB;IACzEF,OAAO,CAACG,KAAK,EAAE;EACjB;EAEAC,OAAO,CAACC,KAAU;IAChB,IAAIA,KAAK,CAACC,OAAO,KAAK,EAAE,EAAE;MACxBD,KAAK,CAACE,cAAc,EAAE;MACtB,IAAIlC,OAAO,GAAG4B,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAqB;;EAE7E;EAEAM,GAAG;IACD,IAAI,CAACzC,cAAc,CAACyC,GAAG,CAAC,IAAI,CAACC,UAAU,CAACC,WAAW,EAAE,CAAC;EACxD;CACD;AAxFY/C,yBAAyB,eALrCH,SAAS,CAAC;EACTmD,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWlD,yBAAyB,CAwFrC;SAxFYA,yBAAyB","names":["Component","FormControl","Validators","NewWarehouseItemComponent","constructor","formBuilder","warehouseService","productService","toastr","id","name","description","madeIn","barcode","warningCount","subcategoryId","subcategoryName","categoryId","categoryName","adminId","adminFullName","addedDate","Date","modifiedDate","required","nullValidator","group","quantity","broughtDate","incomingPrice","sellingPrice","productId","warehouseId","ngOnInit","getAll","subscribe","data","warehouses","products","focusOnScan","element","document","getElementById","focus","scanned","event","keyCode","preventDefault","add","addNewForm","getRawValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\warehouse-item\\new-warehouse-item\\new-warehouse-item.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Product } from 'src/app/models/Product';\nimport { Warehouse } from 'src/app/models/warehouse';\nimport { ProductService } from 'src/app/services/product/product.service';\nimport { WarehouseService } from 'src/app/services/warehouse/warehouse.service';\n\n@Component({\n  selector: 'app-new-warehouse-item',\n  templateUrl: './new-warehouse-item.component.html',\n  styleUrls: ['./new-warehouse-item.component.css'],\n})\nexport class NewWarehouseItemComponent implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private warehouseService: WarehouseService,\n    private productService: ProductService,\n    private toastr: ToastrService\n  ) {}\n\n  warehouses: Warehouse[] = [];\n  products: Product[] = [];\n  selectedProduct: Product = {\n    id: 0,\n    name: '',\n    description: '',\n    madeIn: '',\n    barcode: '',\n    warningCount: 0,\n    subcategoryId: 0,\n    subcategoryName: '',\n    categoryId: 0,\n    categoryName: '',\n    adminId: '',\n    adminFullName: '',\n    addedDate: new Date(),\n    modifiedDate: new Date()\n  };\n\n  ngOnInit(): void {\n    this.warehouseService.getAll().subscribe((data) => {\n      this.warehouses = data;\n    });\n    this.productService.getAll().subscribe((data) => this.products = data);\n  }\n\n  quantity = new FormControl(0, [\n    Validators.required\n  ]);\n\n  broughtDate = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  incomingPrice = new FormControl(0, [\n    Validators.required,\n  ]);\n\n  sellingPrice = new FormControl(0, [\n    Validators.required,\n  ]);\n\n  productId = new FormControl(0, [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  adminId = new FormControl('');\n\n  warehouseId = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  public addNewForm = this.formBuilder.group({\n    quantity: this.quantity,\n    broughtDate: this.broughtDate,\n    incomingPrice: this.incomingPrice,\n    sellingPrice: this.sellingPrice,\n    productId: this.productId,\n    adminId: this.adminId,\n    warehouseId: this.warehouseId\n  });\n\n  focusOnScan() {\n    var element = document.getElementById('barcodeInput') as HTMLInputElement;\n    element.focus();\n  }\n\n  scanned(event: any) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      var barcode = document.getElementById('barcodeInput') as HTMLInputElement;\n    }\n  }\n\n  add() {\n    this.productService.add(this.addNewForm.getRawValue());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}