{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProductComponent = class ProductComponent {\n  constructor(productService, actRoute, router, cdrf) {\n    this.productService = productService;\n    this.actRoute = actRoute;\n    this.router = router;\n    this.cdrf = cdrf;\n    this.product = {\n      id: 0,\n      name: '',\n      description: '',\n      madeIn: '',\n      barcode: '',\n      warningCount: 0,\n      subcategoryId: 0,\n      subcategoryName: '',\n      categoryId: 0,\n      categoryName: '',\n      adminId: '',\n      adminFullName: '',\n      addedDate: new Date(),\n      modifiedDate: new Date()\n    };\n    this.page = 0;\n  }\n  ngOnInit() {\n    const routeParams = this.actRoute.snapshot.paramMap;\n    this.page = Number(routeParams.get('page') ?? 1);\n    this.paging(this.page);\n  }\n  onProductSelect(product) {\n    this.product = product;\n  }\n  remove(id) {\n    this.productService.remove(id);\n  }\n  paging(pageNumber) {\n    pageNumber = Math.round(pageNumber);\n    this.products = this.productService.getPaged(pageNumber);\n    this.pagination = this.productService.pagination;\n    this.router.navigate(['/product', pageNumber]);\n    this.updatePagination(pageNumber);\n    this.cdrf.detectChanges();\n    this.cdrf.markForCheck();\n  }\n  updatePagination(pageNumber) {\n    var paging = document.getElementById('paging2');\n    paging.innerHTML = `\n    <li *ngIf=\"pagination!.HasPrevious\" class=\"page-item\">\n          <a\n            class=\"page-link\"\n            (click)=\"paging(${pageNumber - 1})\"\n            aria-label=\"Previous\"\n          >\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n        <li *ngIf=\"!pagination!.HasPrevious\" class=\"page-item disabled\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging(1)\">1</a>\n            </div>\n          </li>\n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging(${pageNumber / 2})\">...</a>\n            </div></li>\n          <li>\n          <div class=\"page-item\">\n            <a class=\"page-link\" (click)=\"paging(${pageNumber - 1})\">${pageNumber - 1}</a>\n          </div></li>\n          <li>\n          <div class=\"page-item\">\n            <a class=\"page-link\" (click)=\"paging(${pageNumber})\">${pageNumber}</a>\n          </div></li>\n          <li>\n          <div class=\"page-item\">\n            <a class=\"page-link\" (click)=\"paging(${pageNumber + 1})\">${pageNumber + 1}</a>\n          </div></li>          \n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging((${(pageNumber + this.pagination.TotalPages) / 2})\">...</a>\n            </div></li>\n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging(${this.pagination.TotalPages})\">${this.pagination.TotalPages}</a>\n            </div></li>\n        <li class=\"page-item\" *ngIf=\"pagination!.HasNext\">\n          <a\n            class=\"page-link\"\n            (click)=\"paging(pagination!.CurrentPage + 1)\"\n            aria-label=\"Next\"\n          >\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n        <li class=\"page-item disabled\" *ngIf=\"!pagination!.HasNext\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n    `;\n  }\n};\nProductComponent = __decorate([Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})], ProductComponent);\nexport { ProductComponent };","map":{"version":3,"mappings":";AAAA,SAA4BA,SAAS,QAAgB,eAAe;AAY7D,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAsB3BC,YAAoBC,cAA8B,EAC9BC,QAAwB,EACxBC,MAAc,EACdC,IAAuB;IAHvB,mBAAc,GAAdH,cAAc;IACd,aAAQ,GAARC,QAAQ;IACR,WAAM,GAANC,MAAM;IACN,SAAI,GAAJC,IAAI;IAtBxB,YAAO,GAAY;MACjBC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC;MAChBC,eAAe,EAAE,EAAE;MACnBC,UAAU,EAAE,CAAC;MACbC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,YAAY,EAAE,IAAID,IAAI;KACvB;IAEM,SAAI,GAAW,CAAC;EAKuB;EAE9CE,QAAQ;IACN,MAAMC,WAAW,GAAG,IAAI,CAACnB,QAAQ,CAACoB,QAAQ,CAACC,QAAQ;IACnD,IAAI,CAACC,IAAI,GAAGC,MAAM,CAACJ,WAAW,CAACK,GAAG,CAAC,MAAM,CAAC,IAAE,CAAC,CAAC;IAC9C,IAAI,CAACC,MAAM,CAAC,IAAI,CAACH,IAAI,CAAC;EACxB;EAEAI,eAAe,CAACC,OAAgB;IAC9B,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEAC,MAAM,CAACzB,EAAU;IACf,IAAI,CAACJ,cAAc,CAAC6B,MAAM,CAACzB,EAAE,CAAC;EAChC;EAEAsB,MAAM,CAACI,UAAkB;IACvBA,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC;IACnC,IAAI,CAACG,QAAQ,GAAG,IAAI,CAACjC,cAAc,CAACkC,QAAQ,CAACJ,UAAU,CAAC;IACxD,IAAI,CAACK,UAAU,GAAG,IAAI,CAACnC,cAAc,CAACmC,UAAU;IAChD,IAAI,CAACjC,MAAM,CAACkC,QAAQ,CAAC,CAAC,UAAU,EAAEN,UAAU,CAAC,CAAC;IAC9C,IAAI,CAACO,gBAAgB,CAACP,UAAU,CAAC;IACjC,IAAI,CAAC3B,IAAI,CAACmC,aAAa,EAAE;IACzB,IAAI,CAACnC,IAAI,CAACoC,YAAY,EAAE;EAC1B;EAEAF,gBAAgB,CAACP,UAAkB;IACjC,IAAIJ,MAAM,GAAGc,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAqB;IACnEf,MAAM,CAACgB,SAAS,GAAG;;;;8BAIOZ,UAAU,GAAG,CAAC;;;;;;;;;;;;;;;;;;qDAkBSA,UAAU,GAAC,CAAC;;;;mDAIdA,UAAU,GAAC,CAAC,MAAMA,UAAU,GAAC,CAAC;;;;mDAI9BA,UAAU,MAAMA,UAAU;;;;mDAI1BA,UAAU,GAAC,CAAC,MAAMA,UAAU,GAAC,CAAC;;;;sDAI3B,CAACA,UAAU,GAAC,IAAI,CAACK,UAAW,CAACQ,UAAU,IAAE,CAAC;;;;qDAI3C,IAAI,CAACR,UAAW,CAACQ,UAAU,MAAM,IAAI,CAACR,UAAW,CAACQ,UAAU;;;;;;;;;;;;;;;;KAgB5G;EAEH;CACD;AAlHY7C,gBAAgB,eAL5BD,SAAS,CAAC;EACT+C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACWhD,gBAAgB,CAkH5B;SAlHYA,gBAAgB","names":["Component","ProductComponent","constructor","productService","actRoute","router","cdrf","id","name","description","madeIn","barcode","warningCount","subcategoryId","subcategoryName","categoryId","categoryName","adminId","adminFullName","addedDate","Date","modifiedDate","ngOnInit","routeParams","snapshot","paramMap","page","Number","get","paging","onProductSelect","product","remove","pageNumber","Math","round","products","getPaged","pagination","navigate","updatePagination","detectChanges","markForCheck","document","getElementById","innerHTML","TotalPages","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\product\\product.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Pagination } from 'src/app/models/Pagination';\nimport { Product } from 'src/app/models/Product';\nimport { ProductService } from 'src/app/services/product/product.service';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css'],\n})\nexport class ProductComponent implements OnInit {\n  products: Observable<Product[]> | undefined;\n  pagination: Pagination | undefined;\n  product: Product = {\n    id: 0,\n    name: '',\n    description: '',\n    madeIn: '',\n    barcode: '',\n    warningCount: 0,\n    subcategoryId: 0,\n    subcategoryName: '',\n    categoryId: 0,\n    categoryName: '',\n    adminId: '',\n    adminFullName: '',\n    addedDate: new Date(),\n    modifiedDate: new Date()\n  };\n\n  public page: number = 0;\n\n  constructor(private productService: ProductService,\n              private actRoute: ActivatedRoute,\n              private router: Router,\n              private cdrf: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    const routeParams = this.actRoute.snapshot.paramMap;\n    this.page = Number(routeParams.get('page')??1);\n    this.paging(this.page);\n  }\n\n  onProductSelect(product: Product) {\n    this.product = product;\n  }\n\n  remove(id: number) {\n    this.productService.remove(id);\n  }\n\n  paging(pageNumber: number) {\n    pageNumber = Math.round(pageNumber);\n    this.products = this.productService.getPaged(pageNumber);\n    this.pagination = this.productService.pagination;\n    this.router.navigate(['/product', pageNumber]);\n    this.updatePagination(pageNumber);\n    this.cdrf.detectChanges();\n    this.cdrf.markForCheck();\n  }\n\n  updatePagination(pageNumber: number) {\n    var paging = document.getElementById('paging2') as HTMLUListElement;\n    paging.innerHTML = `\n    <li *ngIf=\"pagination!.HasPrevious\" class=\"page-item\">\n          <a\n            class=\"page-link\"\n            (click)=\"paging(${pageNumber - 1})\"\n            aria-label=\"Previous\"\n          >\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n        <li *ngIf=\"!pagination!.HasPrevious\" class=\"page-item disabled\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging(1)\">1</a>\n            </div>\n          </li>\n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging(${pageNumber/2})\">...</a>\n            </div></li>\n          <li>\n          <div class=\"page-item\">\n            <a class=\"page-link\" (click)=\"paging(${pageNumber-1})\">${pageNumber-1}</a>\n          </div></li>\n          <li>\n          <div class=\"page-item\">\n            <a class=\"page-link\" (click)=\"paging(${pageNumber})\">${pageNumber}</a>\n          </div></li>\n          <li>\n          <div class=\"page-item\">\n            <a class=\"page-link\" (click)=\"paging(${pageNumber+1})\">${pageNumber+1}</a>\n          </div></li>          \n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging((${(pageNumber+this.pagination!.TotalPages)/2})\">...</a>\n            </div></li>\n          <li>\n            <div class=\"page-item\">\n              <a class=\"page-link\" (click)=\"paging(${this.pagination!.TotalPages})\">${this.pagination!.TotalPages}</a>\n            </div></li>\n        <li class=\"page-item\" *ngIf=\"pagination!.HasNext\">\n          <a\n            class=\"page-link\"\n            (click)=\"paging(pagination!.CurrentPage + 1)\"\n            aria-label=\"Next\"\n          >\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n        <li class=\"page-item disabled\" *ngIf=\"!pagination!.HasNext\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n    `;\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}