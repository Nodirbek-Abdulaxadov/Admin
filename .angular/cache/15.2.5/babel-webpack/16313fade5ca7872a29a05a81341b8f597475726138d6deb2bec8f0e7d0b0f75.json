{"ast":null,"code":"import { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class LoginService {\n  constructor(httpClient, toastr, router) {\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.router = router;\n    this.url = Constants.BASE_URL + \"auth/\";\n  }\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? \"\");\n    var token = json[\"Token\"];\n    var refreshToken = json[\"RefreshToken\"];\n    var body = {\n      \"token\": token,\n      \"refreshToken\": refreshToken\n    };\n    this.httpClient.post(this.url + 'refresh-user', body, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        localStorage.clear();\n        localStorage.setItem(\"data\", JSON.stringify(data));\n        this.toastr.success(\"Token updated!\");\n      },\n      error: error => {\n        switch (error.status) {\n          case 400:\n            {\n              localStorage.clear();\n              this.toastr.error(\"Bad request!\");\n            }\n            break;\n          case 401:\n            {\n              localStorage.clear();\n              this.toastr.error(\"Token expired!\");\n            }\n            break;\n        }\n      }\n    });\n  }\n  login(form) {\n    console.log(form);\n    this.httpClient.post(this.url + 'login', form, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        localStorage.setItem(\"data\", JSON.stringify(data));\n        this.toastr.success('Successfully logged in!');\n        //this.router.navigate(['/']);\n      },\n\n      error: error => {\n        console.log(error);\n        switch (error.status) {\n          case 400:\n            {\n              this.toastr.error(\"Nimadir xato!\");\n            }\n            break;\n          case 401:\n            this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\");\n            break;\n          //case 0: this.router.navigate(['/server-error']); break;\n        }\n      }\n    });\n  }\n}\n\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,0BAA0B;;;;;AAKpD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,UAAsB,EACtBC,MAAqB,EACrBC,MAAc;IAFd,eAAU,GAAVF,UAAU;IACV,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IAJ1B,QAAG,GAAWL,SAAS,CAACM,QAAQ,GAAG,OAAO;EAIJ;EAEtCC,YAAY;IACR,IAAIC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAE,EAAE,CAAC;IACpC,IAAIM,KAAK,GAAGH,IAAI,CAAC,OAAO,CAAC;IACzB,IAAIJ,YAAY,GAAGI,IAAI,CAAC,cAAc,CAAC;IACvC,IAAII,IAAI,GAAG;MACT,OAAO,EAAED,KAAK;MACd,cAAc,EAAEP;KACjB;IAED,IAAI,CAACJ,UAAU,CAACa,IAAI,CAAC,IAAI,CAACC,GAAG,GAAC,cAAc,EAAEF,IAAI,EAAE;MAACG,eAAe,EAAE;IAAI,CAAC,CAAC,CAACC,SAAS,CAChF;MAAEC,IAAI,EAAEC,IAAI,IAAG;QACXZ,YAAY,CAACa,KAAK,EAAE;QACpBb,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACH,IAAI,CAAC,CAAC;QAClD,IAAI,CAACjB,MAAM,CAACqB,OAAO,CAAC,gBAAgB,CAAC;MACzC,CAAC;MACDC,KAAK,EAAEA,KAAK,IAAG;QACb,QAAOA,KAAK,CAACC,MAAM;UACjB,KAAK,GAAG;YAAE;cACRlB,YAAY,CAACa,KAAK,EAAE;cACpB,IAAI,CAAClB,MAAM,CAACsB,KAAK,CAAC,cAAc,CAAC;;YAClC;UACD,KAAK,GAAG;YAAE;cACRjB,YAAY,CAACa,KAAK,EAAE;cACpB,IAAI,CAAClB,MAAM,CAACsB,KAAK,CAAC,gBAAgB,CAAC;;YACnC;QAAM;MAEZ;IAAC,CAAC,CACL;EACP;EAGAE,KAAK,CAACC,IAAS;IACbC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,IAAI,CAAC1B,UAAU,CAACa,IAAI,CAAC,IAAI,CAACC,GAAG,GAAE,OAAO,EAAEY,IAAI,EAAE;MAACX,eAAe,EAAE;IAAI,CAAC,CAAC,CAACC,SAAS,CAC9E;MAAEC,IAAI,EAAEC,IAAI,IAAG;QACVZ,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACH,IAAI,CAAC,CAAC;QAClD,IAAI,CAACjB,MAAM,CAACqB,OAAO,CAAC,yBAAyB,CAAC;QAC9C;MACJ,CAAC;;MACDC,KAAK,EAAEA,KAAK,IAAG;QACbI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;QAChB,QAAOA,KAAK,CAACC,MAAM;UACjB,KAAK,GAAG;YAAE;cACT,IAAI,CAACvB,MAAM,CAACsB,KAAK,CAAC,eAAe,CAAC;;YAClC;UACD,KAAK,GAAG;YACR,IAAI,CAACtB,MAAM,CAACsB,KAAK,CAAC,gDAAgD,CAAC;YAAE;UACrE;QAAA;MAEN;IAAC,CAAC,CACL;EACF;;;AA5DWzB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA+B,SAAZ/B,YAAY;EAAAgC,YAFX;AAAM","names":["Constants","LoginService","constructor","httpClient","toastr","router","BASE_URL","refreshToken","localdata","localStorage","getItem","json","JSON","parse","token","body","post","url","withCredentials","subscribe","next","data","clear","setItem","stringify","success","error","status","login","form","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\pages\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Constants } from 'src/app/models/Constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  url: string = Constants.BASE_URL + \"auth/\"\n\n  constructor(private httpClient: HttpClient,\n              private toastr: ToastrService,\n              private router: Router) { }\n\n  refreshToken() {\n      var localdata = localStorage.getItem('data');\n      var json = JSON.parse(localdata??\"\");\n      var token = json[\"Token\"];\n      var refreshToken = json[\"RefreshToken\"];\n      var body = {\n        \"token\": token,\n        \"refreshToken\": refreshToken\n      }\n\n      this.httpClient.post(this.url+'refresh-user', body, {withCredentials: true}).subscribe(\n            { next: data => {\n                localStorage.clear();\n                localStorage.setItem(\"data\", JSON.stringify(data));\n                this.toastr.success(\"Token updated!\")\n            },\n            error: error => {\n              switch(error.status) {\n                case 400: {\n                  localStorage.clear();\n                  this.toastr.error(\"Bad request!\")\n                }break;\n                case 401: {\n                  localStorage.clear();\n                  this.toastr.error(\"Token expired!\")\n                } break;\n              }\n            }}\n        );\n  }\n\n\n  login(form: any) {\n    console.log(form);\n    this.httpClient.post(this.url +'login', form, {withCredentials: true}).subscribe(\n      { next: data => {\n           localStorage.setItem(\"data\", JSON.stringify(data));\n           this.toastr.success('Successfully logged in!');\n           //this.router.navigate(['/']);\n       },\n       error: error => {\n         console.log(error);\n           switch(error.status) {\n             case 400: {\n              this.toastr.error(\"Nimadir xato!\");\n             }break;\n             case 401: \n             this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\"); break;\n             //case 0: this.router.navigate(['/server-error']); break;\n           }\n       }}\n   );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}