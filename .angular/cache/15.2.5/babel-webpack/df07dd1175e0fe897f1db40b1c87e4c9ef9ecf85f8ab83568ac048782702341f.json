{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/subcategory/subcategory.service\";\nexport class NewProductComponent {\n  constructor(formBuilder, subcategoryService) {\n    this.formBuilder = formBuilder;\n    this.subcategoryService = subcategoryService;\n    this.subcategories = [];\n    this.name = new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]);\n    this.description = new FormControl('', [Validators.maxLength(200)]);\n    this.madeIn = new FormControl('', [Validators.required, Validators.maxLength(60)]);\n    this.barcode = new FormControl('', [Validators.required, Validators.minLength(12), Validators.maxLength(20)]);\n    this.warningCount = new FormControl(0, [Validators.required]);\n    this.adminId = new FormControl('');\n    this.subcategoryId = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.addNewForm = this.formBuilder.group({\n      name: this.name,\n      categoryId: this.subcategoryId,\n      description: this.description,\n      madeIn: this.madeIn,\n      barcode: this.barcode,\n      warningCount: this.warningCount,\n      adminId: this.adminId\n    });\n  }\n  ngOnInit() {\n    this.subcategoryService.getAll().subscribe(data => this.subcategories = data);\n  }\n  add() {\n    console.log(this.addNewForm.getRawValue());\n  }\n}\nNewProductComponent.ɵfac = function NewProductComponent_Factory(t) {\n  return new (t || NewProductComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SubcategoryService));\n};\nNewProductComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewProductComponent,\n  selectors: [[\"app-new-product\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"container\"]],\n  template: function NewProductComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;AASrE,OAAM,MAAOC,mBAAmB;EAC9BC,YAAoBC,WAAwB,EACxBC,kBAAsC;IADtC,gBAAW,GAAXD,WAAW;IACX,uBAAkB,GAAlBC,kBAAkB;IAEtC,kBAAa,GAAkB,EAAE;IAMjC,SAAI,GAAG,IAAIL,WAAW,CAAC,EAAE,EAAE,CACzBC,UAAU,CAACK,QAAQ,EACnBL,UAAU,CAACM,SAAS,CAAC,CAAC,CAAC,EACvBN,UAAU,CAACO,SAAS,CAAC,GAAG,CAAC,CAC1B,CAAC;IAEF,gBAAW,GAAG,IAAIR,WAAW,CAAC,EAAE,EAAE,CAChCC,UAAU,CAACO,SAAS,CAAC,GAAG,CAAC,CAC1B,CAAC;IAEF,WAAM,GAAG,IAAIR,WAAW,CAAC,EAAE,EAAE,CAC3BC,UAAU,CAACK,QAAQ,EACnBL,UAAU,CAACO,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;IAEF,YAAO,GAAG,IAAIR,WAAW,CAAC,EAAE,EAAE,CAC5BC,UAAU,CAACK,QAAQ,EACnBL,UAAU,CAACM,SAAS,CAAC,EAAE,CAAC,EACxBN,UAAU,CAACO,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;IAEF,iBAAY,GAAG,IAAIR,WAAW,CAAC,CAAC,EAAE,CAChCC,UAAU,CAACK,QAAQ,CACpB,CAAC;IAEF,YAAO,GAAG,IAAIN,WAAW,CAAC,EAAE,CAAC;IAE7B,kBAAa,GAAG,IAAIA,WAAW,CAAC,EAAE,EAAE,CAClCC,UAAU,CAACK,QAAQ,EACnBL,UAAU,CAACQ,aAAa,CACzB,CAAC;IAEK,eAAU,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACzCC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,UAAU,EAAE,IAAI,CAACC,aAAa;MAC9BC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EAhD2D;EAI7DC,QAAQ;IACN,IAAI,CAACd,kBAAkB,CAACe,MAAM,EAAE,CAACC,SAAS,CAACC,IAAI,IAAI,IAAI,CAACC,aAAa,GAAGD,IAAI,CAAC;EAC/E;EA8CAE,GAAG;IACDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,UAAU,CAACC,WAAW,EAAE,CAAC;EAC5C;;AAxDW1B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVhCC,yBAEM","names":["FormControl","Validators","NewProductComponent","constructor","formBuilder","subcategoryService","required","minLength","maxLength","nullValidator","group","name","categoryId","subcategoryId","description","madeIn","barcode","warningCount","adminId","ngOnInit","getAll","subscribe","data","subcategories","add","console","log","addNewForm","getRawValue","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\product\\new-product\\new-product.component.ts","C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\product\\new-product\\new-product.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Subcategory } from 'src/app/models/Subcategory';\nimport { SubcategoryService } from 'src/app/services/subcategory/subcategory.service';\n\n@Component({\n  selector: 'app-new-product',\n  templateUrl: './new-product.component.html',\n  styleUrls: ['./new-product.component.css']\n})\nexport class NewProductComponent implements OnInit {\n  constructor(private formBuilder: FormBuilder,\n              private subcategoryService: SubcategoryService) {}\n\n  subcategories: Subcategory[] = [];\n\n  ngOnInit(): void {\n    this.subcategoryService.getAll().subscribe(data => this.subcategories = data);\n  }\n\n  name = new FormControl('', [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(100),\n  ]);\n\n  description = new FormControl('', [\n    Validators.maxLength(200),\n  ]);\n\n  madeIn = new FormControl('', [\n    Validators.required,\n    Validators.maxLength(60),\n  ]);\n\n  barcode = new FormControl('', [\n    Validators.required,\n    Validators.minLength(12),\n    Validators.maxLength(20),\n  ]);\n\n  warningCount = new FormControl(0, [\n    Validators.required\n  ]);\n\n  adminId = new FormControl('');\n\n  subcategoryId = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  public addNewForm = this.formBuilder.group({\n    name: this.name,\n    categoryId: this.subcategoryId,\n    description: this.description,\n    madeIn: this.madeIn,\n    barcode: this.barcode,\n    warningCount: this.warningCount,\n    adminId: this.adminId\n  });\n\n  \n\n  add() {\n    console.log(this.addNewForm.getRawValue())\n  }\n}\n","<div class=\"container\">\n    \n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}