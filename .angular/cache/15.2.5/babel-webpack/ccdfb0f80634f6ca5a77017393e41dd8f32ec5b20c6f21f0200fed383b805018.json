{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet NewProductComponent = class NewProductComponent {\n  constructor(formBuilder, subcategoryService, categoryService, productService, toastr) {\n    this.formBuilder = formBuilder;\n    this.subcategoryService = subcategoryService;\n    this.categoryService = categoryService;\n    this.productService = productService;\n    this.toastr = toastr;\n    this.subcategories = [];\n    this.subcategoriesFilter = [];\n    this.categories = [];\n    this.barcodeIsClean = true;\n    this.subcategoryIsEmpty = true;\n    this.firstSubcategory = 0;\n    this.name = new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]);\n    this.description = new FormControl('', [Validators.maxLength(200)]);\n    this.madeIn = new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(60)]);\n    this.barcode = new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(20)]);\n    this.warningCount = new FormControl(0, [Validators.required]);\n    this.adminId = new FormControl('');\n    this.categoryId = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.subcategoryId = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.addNewForm = this.formBuilder.group({\n      name: this.name,\n      categoryId: this.categoryId,\n      subcategoryId: this.subcategoryId,\n      description: this.description,\n      madeIn: this.madeIn,\n      barcode: this.barcode,\n      warningCount: this.warningCount,\n      adminId: this.adminId\n    });\n  }\n  ngAfterViewInit() {\n    if (this.getSavedBarcode().length > 10) {\n      this.setBarcode(this.getSavedBarcode());\n      this.addNewForm.controls.barcode.setValue(this.getSavedBarcode());\n    }\n  }\n  ngOnInit() {\n    this.subcategoryService.getAll().subscribe(data => {\n      this.subcategories = data;\n      this.subcategoriesFilter = data;\n    });\n    this.categoryService.getAll().subscribe(data => this.categories = data);\n  }\n  focusOnScan() {\n    var element = document.getElementById('barcodeInput');\n    element.focus();\n    this.saveBarcode('');\n  }\n  scanned(event) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      var barcode = document.getElementById('barcodeInput');\n      this.setBarcode(barcode.value);\n    }\n  }\n  categorySelected() {\n    var categoryId = this.addNewForm.getRawValue().categoryId;\n    this.subcategoriesFilter = this.subcategories.filter(s => s.categoryId == Number(categoryId));\n    if (this.subcategoriesFilter.length > 0) {\n      this.firstSubcategory = this.subcategoriesFilter[0].id;\n      this.subcategoryIsEmpty = false;\n    } else {\n      this.subcategoryIsEmpty = true;\n    }\n  }\n  add() {\n    this.productService.add(this.addNewForm.getRawValue());\n  }\n  randomBarcode() {\n    this.productService.getBarcode().subscribe(data => {\n      if (data) {\n        this.setBarcode(data);\n        this.addNewForm.controls.barcode.setValue(data.toString());\n        this.toastr.success(\"Barcode yaratildi!\");\n        this.saveBarcode(data);\n      } else {\n        this.toastr.error(\"Xatolik yuz berdi!\");\n      }\n    });\n  }\n  getCurrentBarcode() {\n    return this.addNewForm.controls.barcode.value;\n  }\n  clearBarcode() {\n    var src = 'assets/images/barcode0.png';\n    var barcodeimg = document.getElementById('barcode');\n    barcodeimg.src = src;\n    this.addNewForm.controls.barcode.setValue('');\n    this.saveBarcode('');\n  }\n  setBarcode(barcode) {\n    var barcodeImgUrl = 'https://barcodeapi.org/api/128/';\n    var barcodeimg = document.getElementById('barcode');\n    barcodeimg.src = barcodeImgUrl + barcode;\n    this.saveBarcode(barcode);\n  }\n  saveBarcode(barcode) {\n    localStorage.setItem('barcode', barcode);\n  }\n  getSavedBarcode() {\n    return localStorage.getItem('barcode');\n  }\n};\nNewProductComponent = __decorate([Component({\n  selector: 'app-new-product',\n  templateUrl: './new-product.component.html',\n  styleUrls: ['./new-product.component.css']\n})], NewProductComponent);\nexport { NewProductComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","NewProductComponent","constructor","formBuilder","subcategoryService","categoryService","productService","toastr","required","minLength","maxLength","nullValidator","group","name","categoryId","subcategoryId","description","madeIn","barcode","warningCount","adminId","ngAfterViewInit","getSavedBarcode","length","setBarcode","addNewForm","controls","setValue","ngOnInit","getAll","subscribe","data","subcategories","subcategoriesFilter","categories","focusOnScan","element","document","getElementById","focus","saveBarcode","scanned","event","keyCode","preventDefault","value","categorySelected","getRawValue","filter","s","Number","firstSubcategory","id","subcategoryIsEmpty","add","randomBarcode","getBarcode","toString","success","error","getCurrentBarcode","clearBarcode","src","barcodeimg","barcodeImgUrl","localStorage","setItem","getItem","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\product\\new-product\\new-product.component.ts"],"sourcesContent":["import { AfterViewInit, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Category } from 'src/app/models/Category';\nimport { Subcategory } from 'src/app/models/Subcategory';\nimport { CategoryService } from 'src/app/services/category/category.service';\nimport { ProductService } from 'src/app/services/product/product.service';\nimport { SubcategoryService } from 'src/app/services/subcategory/subcategory.service';\n\n@Component({\n  selector: 'app-new-product',\n  templateUrl: './new-product.component.html',\n  styleUrls: ['./new-product.component.css']\n})\nexport class NewProductComponent implements OnInit, AfterViewInit {\n  constructor(private formBuilder: FormBuilder,\n              private subcategoryService: SubcategoryService,\n              private categoryService: CategoryService,\n              private productService: ProductService,\n              private toastr: ToastrService) {}\n  ngAfterViewInit(): void {\n    \n    if (this.getSavedBarcode()!.length > 10) {\n      this.setBarcode(this.getSavedBarcode()!)\n      this.addNewForm.controls.barcode.setValue(this.getSavedBarcode()!);\n  }\n  }\n\n  subcategories: Subcategory[] = [];\n  subcategoriesFilter: Subcategory[] = [];\n  categories: Category[] = [];\n  barcodeIsClean: boolean = true;\n  subcategoryIsEmpty: boolean = true;\n  firstSubcategory: number = 0;\n\n  ngOnInit(): void {\n    this.subcategoryService.getAll().subscribe(data => {\n      this.subcategories = data;\n      this.subcategoriesFilter = data;\n    });\n    this.categoryService.getAll().subscribe(data => this.categories = data);\n  }\n\n  name = new FormControl('', [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(100),\n  ]);\n\n  description = new FormControl('', [\n    Validators.maxLength(200),\n  ]);\n\n  madeIn = new FormControl('', [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(60),\n  ]);\n\n  barcode = new FormControl('', [\n    Validators.required,\n    Validators.minLength(10),\n    Validators.maxLength(20),\n  ]);\n\n  warningCount = new FormControl(0, [\n    Validators.required\n  ]);\n\n  adminId = new FormControl('');\n\n\n  categoryId = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  subcategoryId = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  public addNewForm = this.formBuilder.group({\n    name: this.name,\n    categoryId: this.categoryId,\n    subcategoryId: this.subcategoryId,\n    description: this.description,\n    madeIn: this.madeIn,\n    barcode: this.barcode,\n    warningCount: this.warningCount,\n    adminId: this.adminId\n  });\n\n  focusOnScan() {\n    var element = document.getElementById('barcodeInput') as HTMLInputElement;\n    element.focus();\n    this.saveBarcode('');\n  }\n\n  scanned(event: any) {\n    if(event.keyCode === 13){\n      event.preventDefault();\n      var barcode = document.getElementById('barcodeInput') as HTMLInputElement;\n      this.setBarcode(barcode.value)\n    }\n  }\n\n  categorySelected() {\n    var categoryId = this.addNewForm.getRawValue().categoryId;\n    this.subcategoriesFilter = this.subcategories.filter(s => s.categoryId == Number(categoryId))\n    if (this.subcategoriesFilter.length > 0) {\n      this.firstSubcategory = this.subcategoriesFilter[0].id;\n      this.subcategoryIsEmpty = false;\n    }else {\n      this.subcategoryIsEmpty = true;\n    }\n  }\n\n  add() {\n    this.productService.add(this.addNewForm.getRawValue())\n  }\n\n  randomBarcode() {\n    this.productService.getBarcode().subscribe(data => {\n      if (data) {\n        this.setBarcode(data)\n        this.addNewForm.controls.barcode.setValue(data.toString());\n        this.toastr.success(\"Barcode yaratildi!\");\n        this.saveBarcode(data);\n      }\n      else {\n        this.toastr.error(\"Xatolik yuz berdi!\");\n      }\n    });\n  }\n\n  getCurrentBarcode() {\n    return this.addNewForm.controls.barcode.value;\n  }\n\n  clearBarcode() {\n    var src = 'assets/images/barcode0.png';\n    var barcodeimg = document.getElementById('barcode') as HTMLImageElement\n    barcodeimg.src = src;\n    this.addNewForm.controls.barcode.setValue('');\n    this.saveBarcode('');\n  }\n\n  setBarcode(barcode: string) {\n    var barcodeImgUrl = 'https://barcodeapi.org/api/128/';\n    var barcodeimg = document.getElementById('barcode') as HTMLImageElement\n    barcodeimg.src = barcodeImgUrl + barcode;\n    this.saveBarcode(barcode);\n  }\n\n  saveBarcode(barcode: string) {\n    localStorage.setItem('barcode', barcode);\n  }\n\n  getSavedBarcode() {\n    return localStorage.getItem('barcode')\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}