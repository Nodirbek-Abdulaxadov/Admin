{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet NewProductComponent = class NewProductComponent {\n  constructor(formBuilder, subcategoryService, categoryService, productService) {\n    this.formBuilder = formBuilder;\n    this.subcategoryService = subcategoryService;\n    this.categoryService = categoryService;\n    this.productService = productService;\n    this.subcategories = [];\n    this.subcategoriesFilter = [];\n    this.categories = [];\n    this.barcodeIsClean = true;\n    this.name = new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]);\n    this.description = new FormControl('', [Validators.maxLength(200)]);\n    this.madeIn = new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(60)]);\n    this.barcode = new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(20)]);\n    this.warningCount = new FormControl(0, [Validators.required]);\n    this.adminId = new FormControl('');\n    this.categoryId = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.subcategoryId = new FormControl('', [Validators.required, Validators.nullValidator]);\n    this.addNewForm = this.formBuilder.group({\n      name: this.name,\n      categoryId: this.categoryId,\n      subcategoryId: this.subcategoryId,\n      description: this.description,\n      madeIn: this.madeIn,\n      barcode: this.barcode,\n      warningCount: this.warningCount,\n      adminId: this.adminId\n    });\n  }\n  ngOnInit() {\n    this.subcategoryService.getAll().subscribe(data => {\n      this.subcategories = data;\n      this.subcategoriesFilter = data;\n    });\n    this.categoryService.getAll().subscribe(data => this.categories = data);\n  }\n  focusOnScan() {\n    var element = document.getElementById('barcode');\n    element.focus();\n  }\n  categorySelected() {\n    var categoryId = this.addNewForm.getRawValue().categoryId;\n    this.subcategoriesFilter = this.subcategories.filter(s => s.categoryId == Number(categoryId));\n  }\n  add() {\n    this.productService.add(this.addNewForm.getRawValue());\n  }\n  randomBarcode() {\n    var barcode = document.getElementById('barcode');\n    var barcodeImgUrl = 'https://barcodeapi.org/api/128/';\n    this.productService.getBarcode().subscribe(data => {\n      barcode.src = barcodeImgUrl + data;\n      this.addNewForm.controls.barcode.setValue(data);\n    });\n  }\n};\nNewProductComponent = __decorate([Component({\n  selector: 'app-new-product',\n  templateUrl: './new-product.component.html',\n  styleUrls: ['./new-product.component.css']\n})], NewProductComponent);\nexport { NewProductComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","NewProductComponent","constructor","formBuilder","subcategoryService","categoryService","productService","required","minLength","maxLength","nullValidator","group","name","categoryId","subcategoryId","description","madeIn","barcode","warningCount","adminId","ngOnInit","getAll","subscribe","data","subcategories","subcategoriesFilter","categories","focusOnScan","element","document","getElementById","focus","categorySelected","addNewForm","getRawValue","filter","s","Number","add","randomBarcode","barcodeImgUrl","getBarcode","src","controls","setValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\product\\new-product\\new-product.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Category } from 'src/app/models/Category';\nimport { Subcategory } from 'src/app/models/Subcategory';\nimport { CategoryService } from 'src/app/services/category/category.service';\nimport { ProductService } from 'src/app/services/product/product.service';\nimport { SubcategoryService } from 'src/app/services/subcategory/subcategory.service';\n\n@Component({\n  selector: 'app-new-product',\n  templateUrl: './new-product.component.html',\n  styleUrls: ['./new-product.component.css']\n})\nexport class NewProductComponent implements OnInit {\n  constructor(private formBuilder: FormBuilder,\n              private subcategoryService: SubcategoryService,\n              private categoryService: CategoryService,\n              private productService: ProductService) {}\n\n  subcategories: Subcategory[] = [];\n  subcategoriesFilter: Subcategory[] = [];\n  categories: Category[] = [];\n  barcodeIsClean: boolean = true;\n\n  ngOnInit(): void {\n    this.subcategoryService.getAll().subscribe(data => {\n      this.subcategories = data;\n      this.subcategoriesFilter = data;\n    });\n    this.categoryService.getAll().subscribe(data => this.categories = data);\n  }\n\n  name = new FormControl('', [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(100),\n  ]);\n\n  description = new FormControl('', [\n    Validators.maxLength(200),\n  ]);\n\n  madeIn = new FormControl('', [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(60),\n  ]);\n\n  barcode = new FormControl('', [\n    Validators.required,\n    Validators.minLength(10),\n    Validators.maxLength(20),\n  ]);\n\n  warningCount = new FormControl(0, [\n    Validators.required\n  ]);\n\n  adminId = new FormControl('');\n\n\n  categoryId = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  subcategoryId = new FormControl('', [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  public addNewForm = this.formBuilder.group({\n    name: this.name,\n    categoryId: this.categoryId,\n    subcategoryId: this.subcategoryId,\n    description: this.description,\n    madeIn: this.madeIn,\n    barcode: this.barcode,\n    warningCount: this.warningCount,\n    adminId: this.adminId\n  });\n\n  focusOnScan() {\n    var element = (document.getElementById('barcode')) as HTMLInputElement;\n    element.focus();\n  }\n\n  categorySelected() {\n    var categoryId = this.addNewForm.getRawValue().categoryId;\n    this.subcategoriesFilter = this.subcategories.filter(s => s.categoryId == Number(categoryId))\n  }\n\n  add() {\n    this.productService.add(this.addNewForm.getRawValue())\n  }\n\n  randomBarcode() {\n    var barcode = document.getElementById('barcode') as HTMLImageElement;\n    var barcodeImgUrl = 'https://barcodeapi.org/api/128/';\n    this.productService.getBarcode().subscribe(data => {\n      barcode.src = barcodeImgUrl + data;\n      this.addNewForm.controls.barcode.setValue(data);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}