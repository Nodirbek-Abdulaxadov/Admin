{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"../helpers/token.service\";\nimport * as i4 from \"@angular/router\";\nexport class ProductService {\n  constructor(httpClient, toastr, tokenService, router) {\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.tokenService = tokenService;\n    this.router = router;\n    this.baseUrl = Constants.BASE_URL + \"product/\";\n    this.pagination = {\n      HasPrevious: false,\n      HasNext: false,\n      TotalCount: 0,\n      PageSize: 10,\n      CurrentPage: 1,\n      TotalPages: 0\n    };\n  }\n  getAll() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n    return this.httpClient.get(this.baseUrl, {\n      headers\n    });\n  }\n  getPaged(pageNumber) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n    const url = `${this.baseUrl}paged?pageSize=5&pageNumber=${pageNumber}`;\n    return this.httpClient.get(url, {\n      headers,\n      observe: 'response'\n    }).pipe(map(response => {\n      const warehouses = response.body;\n      const paginationHeader = response.headers.get('x-pagination');\n      var xpagination = JSON.parse(paginationHeader ?? '');\n      this.initPaginationParams(xpagination);\n      return warehouses;\n    }));\n  }\n  add(form) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n    form.adminId = this.tokenService.getUserId();\n    console.log(form);\n    // this.httpClient.post(this.baseUrl, form, { headers }).subscribe({\n    //   next: (data) => {\n    //     this.toastr\n    //       .success(\"Muvofaqqiyatli qo'shildi!\")\n    //       .onHidden.subscribe(() => {\n    //         this.router.navigate(['/product'])\n    //       });\n    //   },\n    //   error: (error) => {\n    //     this.toastr.error('Qandaydir xatolik yuz berdi!', '', {\n    //       timeOut: 3000,\n    //     });\n    //   },\n    // });\n    localStorage.setItem('barcode', '');\n  }\n  getBarcode() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n    return this.httpClient.get(this.baseUrl + 'barcodes/random', {\n      headers\n    });\n  }\n  initPaginationParams(xpagination) {\n    this.pagination.HasPrevious = xpagination['HasPrevious'];\n    this.pagination.HasNext = xpagination['HasNext'];\n    this.pagination.TotalCount = xpagination['TotalCount'];\n    this.pagination.CurrentPage = xpagination['CurrentPage'];\n    this.pagination.PageSize = xpagination['PageSize'];\n    this.pagination.TotalPages = xpagination['TotalPages'];\n  }\n  getToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? '');\n    return json['Token'];\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.TokenService), i0.ɵɵinject(i4.Router));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","map","Constants","ProductService","constructor","httpClient","toastr","tokenService","router","BASE_URL","HasPrevious","HasNext","TotalCount","PageSize","CurrentPage","TotalPages","getAll","headers","set","getToken","get","baseUrl","getPaged","pageNumber","url","observe","pipe","response","warehouses","body","paginationHeader","xpagination","JSON","parse","initPaginationParams","add","form","adminId","getUserId","console","log","localStorage","setItem","getBarcode","pagination","localdata","getItem","json","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\services\\product\\product.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, map } from 'rxjs';\nimport { Constants } from 'src/app/models/Constants';\nimport { Pagination } from 'src/app/models/Pagination';\nimport { Product } from 'src/app/models/Product';\nimport { TokenService } from '../helpers/token.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private httpClient: HttpClient, \n              private toastr: ToastrService,\n              private tokenService: TokenService,\n              private router: Router) {}\n\n  baseUrl: string = Constants.BASE_URL + \"product/\";\n\n  public pagination: Pagination = {\n    HasPrevious: false,\n    HasNext: false,\n    TotalCount: 0,\n    PageSize: 10,\n    CurrentPage: 1,\n    TotalPages: 0,\n  };\n\n  getAll(): Observable<Product[]> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      `Bearer ${this.getToken()}`\n    );\n    return this.httpClient.get<Product[]>(this.baseUrl, { headers });\n  }\n\n  getPaged(pageNumber: number): Observable<Product[]> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      `Bearer ${this.getToken()}`\n    );\n\n    const url = `${this.baseUrl}paged?pageSize=5&pageNumber=${pageNumber}`;\n\n    return this.httpClient.get<any>(url, { headers, observe: 'response' }).pipe(\n      map((response) => {\n        const warehouses = response.body as Product[];\n        const paginationHeader = response.headers.get('x-pagination');\n        var xpagination = JSON.parse(paginationHeader ?? '');\n        this.initPaginationParams(xpagination);\n        return warehouses;\n      })\n    );\n  }\n\n  add(form: any) {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      `Bearer ${this.getToken()}`\n    );\n    form.adminId = this.tokenService.getUserId()\n\n    console.log(form)\n\n    // this.httpClient.post(this.baseUrl, form, { headers }).subscribe({\n    //   next: (data) => {\n    //     this.toastr\n    //       .success(\"Muvofaqqiyatli qo'shildi!\")\n    //       .onHidden.subscribe(() => {\n    //         this.router.navigate(['/product'])\n    //       });\n    //   },\n    //   error: (error) => {\n    //     this.toastr.error('Qandaydir xatolik yuz berdi!', '', {\n    //       timeOut: 3000,\n    //     });\n    //   },\n    // });\n    localStorage.setItem('barcode', '');\n  }\n\n  getBarcode(): Observable<string> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      `Bearer ${this.getToken()}`\n    );\n    return this.httpClient.get<string>(this.baseUrl + 'barcodes/random', { headers });\n  }\n\n  initPaginationParams(xpagination: any): void {\n    this.pagination.HasPrevious = xpagination['HasPrevious'];\n    this.pagination.HasNext = xpagination['HasNext'];\n    this.pagination.TotalCount = xpagination['TotalCount'];\n    this.pagination.CurrentPage = xpagination['CurrentPage'];\n    this.pagination.PageSize = xpagination['PageSize'];\n    this.pagination.TotalPages = xpagination['TotalPages'];\n  }\n\n  getToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? '');\n    return json['Token'];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}