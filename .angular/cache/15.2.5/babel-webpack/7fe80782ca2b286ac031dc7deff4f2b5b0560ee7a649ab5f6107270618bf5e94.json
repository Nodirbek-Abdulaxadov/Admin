{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet EditProductComponent = class EditProductComponent {\n  constructor(formBuilder, subcategoryService, categoryService, productService, actRoute, toastr, cdr) {\n    this.formBuilder = formBuilder;\n    this.subcategoryService = subcategoryService;\n    this.categoryService = categoryService;\n    this.productService = productService;\n    this.actRoute = actRoute;\n    this.toastr = toastr;\n    this.cdr = cdr;\n    this.subcategories = [];\n    this.subcategoriesFilter = [];\n    this.categories = [];\n    this.barcodeIsClean = true;\n    this.firstInit = false;\n    this.product = {\n      id: 0,\n      name: '',\n      description: '',\n      madeIn: '',\n      barcode: '',\n      warningCount: 0,\n      subcategoryId: 0,\n      subcategoryName: '',\n      categoryId: 0,\n      categoryName: '',\n      adminId: '',\n      adminFullName: ''\n    };\n    this.productId = 0;\n    this.name = new FormControl(this.product.name, [Validators.required, Validators.minLength(3), Validators.maxLength(100)]);\n    this.description = new FormControl(this.product.description, [Validators.maxLength(200)]);\n    this.madeIn = new FormControl(this.product.madeIn, [Validators.required, Validators.minLength(2), Validators.maxLength(60)]);\n    this.barcode = new FormControl(this.product.barcode, [Validators.required, Validators.minLength(10), Validators.maxLength(20)]);\n    this.warningCount = new FormControl(this.product.warningCount, [Validators.required]);\n    this.adminId = new FormControl(this.product.adminId);\n    this.categoryId = new FormControl(this.product.categoryId, [Validators.required, Validators.nullValidator]);\n    this.subcategoryId = new FormControl(this.product.subcategoryId, [Validators.required, Validators.nullValidator]);\n    this.editForm = this.formBuilder.group({\n      name: this.name,\n      categoryId: this.categoryId,\n      subcategoryId: this.subcategoryId,\n      description: this.description,\n      madeIn: this.madeIn,\n      barcode: this.barcode,\n      warningCount: this.warningCount,\n      adminId: this.adminId\n    });\n  }\n  ngOnInit() {\n    const routeParams = this.actRoute.snapshot.paramMap;\n    this.productId = Number(routeParams.get('productId') ?? \"\");\n    this.categoryService.getAll().subscribe(data => {\n      this.categories = data;\n    });\n    this.productService.getById(this.productId).subscribe(data => {\n      this.product = data;\n      this.setBarcode(this.product.barcode);\n    });\n    this.subcategoryService.getAll().subscribe(data => {\n      this.subcategories = data;\n      this.subcategoriesFilter = data.filter(i => i.categoryId == this.product.categoryId);\n    });\n  }\n  update() {}\n  focusOnScan() {\n    var element = document.getElementById('barcodeInput');\n    element.focus();\n    this.saveBarcode('');\n  }\n  scanned(event) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      var barcode = document.getElementById('barcodeInput');\n      this.setBarcode(barcode.value);\n    }\n  }\n  categorySelected() {\n    var categoryId = this.editForm.getRawValue().categoryId;\n    this.subcategoriesFilter = this.subcategories.filter(s => s.categoryId == Number(categoryId));\n  }\n  randomBarcode() {\n    this.productService.getBarcode().subscribe(data => {\n      if (data) {\n        this.setBarcode(data);\n        this.editForm.controls.barcode.setValue(data.toString());\n        this.toastr.success(\"Barcode yaratildi!\");\n        this.saveBarcode(data);\n      } else {\n        this.toastr.error(\"Xatolik yuz berdi!\");\n      }\n    });\n  }\n  getCurrentBarcode() {\n    return this.editForm.controls.barcode.value;\n  }\n  clearBarcode() {\n    var src = 'assets/images/barcode0.png';\n    var barcodeimg = document.getElementById('barcode');\n    barcodeimg.src = src;\n    this.editForm.controls.barcode.setValue('');\n    this.saveBarcode('');\n  }\n  setBarcode(barcode) {\n    var barcodeImgUrl = 'https://barcodeapi.org/api/128/';\n    var barcodeimg = document.getElementById('barcode');\n    barcodeimg.src = barcodeImgUrl + barcode;\n    this.saveBarcode(barcode);\n  }\n  saveBarcode(barcode) {\n    localStorage.setItem('barcode', barcode);\n  }\n  getSavedBarcode() {\n    return localStorage.getItem('barcode');\n  }\n};\nEditProductComponent = __decorate([Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-product.component.html',\n  styleUrls: ['./edit-product.component.css']\n})], EditProductComponent);\nexport { EditProductComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","EditProductComponent","constructor","formBuilder","subcategoryService","categoryService","productService","actRoute","toastr","cdr","id","name","description","madeIn","barcode","warningCount","subcategoryId","subcategoryName","categoryId","categoryName","adminId","adminFullName","product","required","minLength","maxLength","nullValidator","group","ngOnInit","routeParams","snapshot","paramMap","productId","Number","get","getAll","subscribe","data","categories","getById","setBarcode","subcategories","subcategoriesFilter","filter","i","update","focusOnScan","element","document","getElementById","focus","saveBarcode","scanned","event","keyCode","preventDefault","value","categorySelected","editForm","getRawValue","s","randomBarcode","getBarcode","controls","setValue","toString","success","error","getCurrentBarcode","clearBarcode","src","barcodeimg","barcodeImgUrl","localStorage","setItem","getSavedBarcode","getItem","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\product\\edit-product\\edit-product.component.ts"],"sourcesContent":["import { AfterViewInit, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Category } from 'src/app/models/Category';\nimport { Product } from 'src/app/models/Product';\nimport { Subcategory } from 'src/app/models/Subcategory';\nimport { CategoryService } from 'src/app/services/category/category.service';\nimport { ProductService } from 'src/app/services/product/product.service';\nimport { SubcategoryService } from 'src/app/services/subcategory/subcategory.service';\n\n@Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-product.component.html',\n  styleUrls: ['./edit-product.component.css']\n})\nexport class EditProductComponent implements OnInit {\n  constructor(private formBuilder: FormBuilder,\n    private subcategoryService: SubcategoryService,\n    private categoryService: CategoryService,\n    private productService: ProductService,\n    private actRoute: ActivatedRoute,\n    private toastr: ToastrService,\n    private cdr: ChangeDetectorRef) {}\n\n  subcategories: Subcategory[] = [];\n  subcategoriesFilter: Subcategory[] = [];\n  categories: Category[] = [];\n  barcodeIsClean: boolean = true;\n  firstInit: boolean = false;\n  product: Product = {\n    id: 0,\n    name: '',\n    description: '',\n    madeIn: '',\n    barcode: '',\n    warningCount: 0,\n    subcategoryId: 0,\n    subcategoryName: '',\n    categoryId: 0,\n    categoryName: '',\n    adminId: '',\n    adminFullName: '',\n  };\n  productId: number = 0;\n\n  ngOnInit(): void {\n    const routeParams = this.actRoute.snapshot.paramMap;\n    this.productId = Number(routeParams.get('productId')??\"\");\n    this.categoryService.getAll().subscribe(data => {\n      this.categories = data;\n    });\n    this.productService.getById(this.productId).subscribe(data => {\n      this.product = data;\n      this.setBarcode(this.product.barcode);\n    });\n    this.subcategoryService.getAll().subscribe(data => {\n      this.subcategories = data;\n      this.subcategoriesFilter = data.filter(i => i.categoryId == this.product.categoryId);\n    });\n  }\n\n  name = new FormControl(this.product.name, [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(100),\n  ]);\n\n  description = new FormControl(this.product.description, [\n    Validators.maxLength(200),\n  ]);\n\n  madeIn = new FormControl(this.product.madeIn, [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(60),\n  ]);\n\n  barcode = new FormControl(this.product.barcode, [\n    Validators.required,\n    Validators.minLength(10),\n    Validators.maxLength(20),\n  ]);\n\n  warningCount = new FormControl(this.product.warningCount, [\n    Validators.required\n  ]);\n\n  adminId = new FormControl(this.product.adminId);\n\n\n  categoryId = new FormControl(this.product.categoryId, [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  subcategoryId = new FormControl(this.product.subcategoryId, [\n    Validators.required,\n    Validators.nullValidator,\n  ]);\n\n  public editForm = this.formBuilder.group({\n    name: this.name,\n    categoryId: this.categoryId,\n    subcategoryId: this.subcategoryId,\n    description: this.description,\n    madeIn: this.madeIn,\n    barcode: this.barcode,\n    warningCount: this.warningCount,\n    adminId: this.adminId\n  });\n\n  update() {\n\n  }\n\n\n  focusOnScan() {\n    var element = document.getElementById('barcodeInput') as HTMLInputElement;\n    element.focus();\n    this.saveBarcode('');\n  }\n\n  scanned(event: any) {\n    if(event.keyCode === 13){\n      event.preventDefault();\n      var barcode = document.getElementById('barcodeInput') as HTMLInputElement;\n      this.setBarcode(barcode.value)\n    }\n  }\n\n  categorySelected() {\n    var categoryId = this.editForm.getRawValue().categoryId;\n    this.subcategoriesFilter = this.subcategories.filter(s => s.categoryId == Number(categoryId))\n  }\n\n  randomBarcode() {\n    this.productService.getBarcode().subscribe(data => {\n      if (data) {\n        this.setBarcode(data)\n        this.editForm.controls.barcode.setValue(data.toString());\n        this.toastr.success(\"Barcode yaratildi!\");\n        this.saveBarcode(data);\n      }\n      else {\n        this.toastr.error(\"Xatolik yuz berdi!\");\n      }\n    });\n  }\n\n  getCurrentBarcode() {\n    return this.editForm.controls.barcode.value;\n  }\n\n  clearBarcode() {\n    var src = 'assets/images/barcode0.png';\n    var barcodeimg = document.getElementById('barcode') as HTMLImageElement\n    barcodeimg.src = src;\n    this.editForm.controls.barcode.setValue('');\n    this.saveBarcode('');\n  }\n\n  setBarcode(barcode: string) {\n    var barcodeImgUrl = 'https://barcodeapi.org/api/128/';\n    var barcodeimg = document.getElementById('barcode') as HTMLImageElement\n    barcodeimg.src = barcodeImgUrl + barcode;\n    this.saveBarcode(barcode);\n  }\n\n  saveBarcode(barcode: string) {\n    localStorage.setItem('barcode', barcode);\n  }\n\n  getSavedBarcode() {\n    return localStorage.getItem('barcode')\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}