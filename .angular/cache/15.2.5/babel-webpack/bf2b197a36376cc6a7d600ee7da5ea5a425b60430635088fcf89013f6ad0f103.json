{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Constants } from 'src/app/models/Constants';\nlet UserComponent = class UserComponent {\n  constructor(userService, formBuilder) {\n    this.userService = userService;\n    this.formBuilder = formBuilder;\n    this.count = 0;\n    this.user = {\n      id: '',\n      fullName: '',\n      phoneNumber: '',\n      role: ''\n    };\n    this.fullName = new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(100)]);\n    this.phoneNumber = new FormControl('', [Validators.required, Validators.minLength(9), Validators.maxLength(15)]);\n    this.addnewForm = this.formBuilder.group({\n      fullName: this.fullName,\n      phoneNumber: this.phoneNumber,\n      password: Constants.DEFAULT_PASSWORD,\n      userRole: \"Admin\"\n    });\n    this.editForm = this.formBuilder.group({\n      fullName: this.fullName,\n      phoneNumber: this.phoneNumber,\n      password: Constants.DEFAULT_PASSWORD,\n      userRole: \"Admin\"\n    });\n  }\n  ngOnInit() {\n    this.users = this.userService.getAll('admins');\n  }\n  addNew() {\n    this.userService.add(this.addnewForm.getRawValue());\n  }\n  openEditModal(model) {\n    this.user = model;\n    var input = document.getElementById('fullName');\n    input.value = model.fullName;\n    input = document.getElementById('phoneNumber');\n    input.value = model.phoneNumber;\n  }\n  checkFullName() {\n    var input = document.getElementById('fullName');\n    return input.value.length > 3;\n  }\n  checkPhoneNumber() {\n    var input = document.getElementById('phoneNumber');\n    return input.value.length > 9;\n  }\n  edit() {}\n};\nUserComponent = __decorate([Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})], UserComponent);\nexport { UserComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAGrE,SAASC,SAAS,QAAQ,0BAA0B;AAS7C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,YAAoBC,WAAwB,EACxBC,WAAwB;IADxB,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IAE/B,UAAK,GAAW,CAAC;IAGjB,SAAI,GAAS;MACXC,EAAE,EAAE,EAAE;MACNC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;KACP;IAMD,aAAQ,GAAG,IAAIV,WAAW,CAAC,EAAE,EAAC,CAC5BC,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,GAAG,CAAC,CAC1B,CAAC;IAEF,gBAAW,GAAG,IAAIb,WAAW,CAAC,EAAE,EAAE,CAChCC,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;IAEK,eAAU,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MACzCN,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BM,QAAQ,EAAEb,SAAS,CAACc,gBAAgB;MACpCC,QAAQ,EAAE;KACX,CAAC;IAEK,aAAQ,GAAG,IAAI,CAACX,WAAW,CAACQ,KAAK,CAAC;MACvCN,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BM,QAAQ,EAAEb,SAAS,CAACc,gBAAgB;MACpCC,QAAQ,EAAE;KACX,CAAC;EAxC4C;EAY9CC,QAAQ;IACN,IAAI,CAACC,KAAK,GAAG,IAAI,CAACd,WAAW,CAACe,MAAM,CAAC,QAAQ,CAAC;EAChD;EA4BAC,MAAM;IACJ,IAAI,CAAChB,WAAW,CAACiB,GAAG,CAAC,IAAI,CAACC,UAAU,CAACC,WAAW,EAAE,CAAC;EACrD;EAEAC,aAAa,CAACC,KAAW;IACvB,IAAI,CAACC,IAAI,GAAGD,KAAK;IACjB,IAAIE,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAqB;IACnEF,KAAK,CAACG,KAAK,GAAGL,KAAK,CAAClB,QAAQ;IAC5BoB,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAqB;IAClEF,KAAK,CAACG,KAAK,GAAGL,KAAK,CAACjB,WAAW;EACjC;EAEAuB,aAAa;IACX,IAAIJ,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAqB;IACnE,OAAOF,KAAK,CAACG,KAAK,CAACE,MAAM,GAAG,CAAC;EAC/B;EAEAC,gBAAgB;IACd,IAAIN,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAqB;IACtE,OAAOF,KAAK,CAACG,KAAK,CAACE,MAAM,GAAG,CAAC;EAC/B;EAGAE,IAAI,IAEJ;CACD;AAvEYhC,aAAa,eALzBJ,SAAS,CAAC;EACTqC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWnC,aAAa,CAuEzB;SAvEYA,aAAa","names":["Component","FormControl","Validators","Constants","UserComponent","constructor","userService","formBuilder","id","fullName","phoneNumber","role","required","minLength","maxLength","group","password","DEFAULT_PASSWORD","userRole","ngOnInit","users","getAll","addNew","add","addnewForm","getRawValue","openEditModal","model","user","input","document","getElementById","value","checkFullName","length","checkPhoneNumber","edit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\components\\user\\user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Constants } from 'src/app/models/Constants';\nimport { User } from 'src/app/models/User';\nimport { UserService } from 'src/app/services/user/user.service';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  constructor(private userService: UserService,\n              private formBuilder: FormBuilder){}\n\n  count: number = 0;\n  users: Observable<User[]> | undefined;\n\n  user: User = {\n    id: '',\n    fullName: '',\n    phoneNumber: '',\n    role: ''\n  }\n\n  ngOnInit(): void {\n    this.users = this.userService.getAll('admins');\n  }\n\n  fullName = new FormControl('',[\n    Validators.required,\n    Validators.minLength(5),\n    Validators.maxLength(100)\n  ])\n\n  phoneNumber = new FormControl('', [\n    Validators.required,\n    Validators.minLength(9),\n    Validators.maxLength(15)\n  ])\n\n  public addnewForm = this.formBuilder.group({\n    fullName: this.fullName,\n    phoneNumber: this.phoneNumber,\n    password: Constants.DEFAULT_PASSWORD,\n    userRole: \"Admin\"\n  });\n\n  public editForm = this.formBuilder.group({\n    fullName: this.fullName,\n    phoneNumber: this.phoneNumber,\n    password: Constants.DEFAULT_PASSWORD,\n    userRole: \"Admin\"\n  });\n\n  addNew() {\n    this.userService.add(this.addnewForm.getRawValue());\n  }\n\n  openEditModal(model: User) {\n    this.user = model;\n    var input = document.getElementById('fullName') as HTMLInputElement;\n    input.value = model.fullName;\n    input = document.getElementById('phoneNumber') as HTMLInputElement;\n    input.value = model.phoneNumber;\n  }\n\n  checkFullName() {\n    var input = document.getElementById('fullName') as HTMLInputElement;\n    return input.value.length > 3;\n  }\n\n  checkPhoneNumber() {\n    var input = document.getElementById('phoneNumber') as HTMLInputElement;\n    return input.value.length > 9;\n  }\n\n\n  edit() {\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}