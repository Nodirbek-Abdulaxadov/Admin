{"ast":null,"code":"import { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class LoginService {\n  constructor(httpClient, toastr, router) {\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.router = router;\n    this.url = Constants.BASE_URL + \"auth/\";\n    this.date1 = new Date();\n    this.date2 = new Date();\n  }\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? \"\");\n    var token = json[\"Token\"];\n    var expiresAt = localStorage.getItem('loggedDate');\n    this.date1 = new Date(expiresAt ?? \"\");\n    if (this.date2.getDay() - this.date1.getDay() > 0 || expiresAt == null) {\n      var refreshToken = json[\"RefreshToken\"];\n      var body = {\n        \"token\": token,\n        \"refreshToken\": refreshToken\n      };\n      this.httpClient.post(this.url + 'refresh-user', body, {\n        withCredentials: true\n      }).subscribe({\n        next: data => {\n          localStorage.clear();\n          localStorage.setItem('loggedDate', this.date2.toString());\n          this.toastr.success('Token updated!');\n          localStorage.setItem(\"data\", JSON.stringify(data));\n          this.toastr.success('Successfully logged in!');\n          localStorage.setItem('loggedDate', this.date2.toString());\n        },\n        error: error => {\n          switch (error.status) {\n            case 400:\n              {\n                localStorage.clear();\n                this.toastr.error(\"Bad request!\");\n              }\n              break;\n            case 401:\n              {\n                localStorage.clear();\n                this.toastr.error(\"Token expired!\");\n              }\n              break;\n            case 0:\n              {\n                this.toastr.error(\"Internal server error!\", '', {\n                  timeOut: 3000\n                });\n                //this.router.navigate(['/server-error']); \n              }\n\n              break;\n          }\n        }\n      });\n    }\n  }\n  login(form) {\n    console.log(form);\n    this.httpClient.post(this.url + 'login', form, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        localStorage.setItem(\"data\", JSON.stringify(data));\n        this.toastr.success('Successfully logged in!');\n        localStorage.setItem('loggedDate', this.date2.toString());\n      },\n      error: error => {\n        console.log(error);\n        switch (error.status) {\n          case 400:\n            {\n              this.toastr.error(\"Nimadir xato!\");\n            }\n            break;\n          case 401:\n            this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\");\n            break;\n          case 0:\n            {\n              this.toastr.error(\"Internal server error!\", '', {\n                timeOut: 3000\n              });\n              //this.router.navigate(['/server-error']); \n            }\n\n            break;\n        }\n      }\n    });\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,0BAA0B;;;;;AAKpD,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,UAAsB,EACtBC,MAAqB,EACrBC,MAAc;IAFd,eAAU,GAAVF,UAAU;IACV,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IAP1B,QAAG,GAAWL,SAAS,CAACM,QAAQ,GAAG,OAAO;IAE1C,UAAK,GAAS,IAAIC,IAAI,EAAE;IACxB,UAAK,GAAS,IAAIA,IAAI,EAAE;EAIc;EAEtCC,YAAY;IACR,IAAIC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAE,EAAE,CAAC;IACpC,IAAIM,KAAK,GAAGH,IAAI,CAAC,OAAO,CAAC;IACzB,IAAII,SAAS,GAAGN,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAClD,IAAI,CAACM,KAAK,GAAG,IAAIV,IAAI,CAACS,SAAS,IAAE,EAAE,CAAC;IACpC,IAAI,IAAI,CAACE,KAAK,CAACC,MAAM,EAAE,GAAG,IAAI,CAACF,KAAK,CAACE,MAAM,EAAE,GAAG,CAAC,IAAIH,SAAS,IAAI,IAAI,EAAE;MACtE,IAAIR,YAAY,GAAGI,IAAI,CAAC,cAAc,CAAC;MACvC,IAAIQ,IAAI,GAAG;QACT,OAAO,EAAEL,KAAK;QACd,cAAc,EAAEP;OACjB;MAED,IAAI,CAACL,UAAU,CAACkB,IAAI,CAAC,IAAI,CAACC,GAAG,GAAC,cAAc,EAAEF,IAAI,EAAE;QAACG,eAAe,EAAE;MAAI,CAAC,CAAC,CAACC,SAAS,CAChF;QAAEC,IAAI,EAAEC,IAAI,IAAG;UACXhB,YAAY,CAACiB,KAAK,EAAE;UACpBjB,YAAY,CAACkB,OAAO,CAAC,YAAY,EAAE,IAAI,CAACV,KAAK,CAACW,QAAQ,EAAE,CAAC;UACzD,IAAI,CAACzB,MAAM,CAAC0B,OAAO,CAAC,gBAAgB,CAAC;UACrCpB,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACkB,SAAS,CAACL,IAAI,CAAC,CAAC;UAClD,IAAI,CAACtB,MAAM,CAAC0B,OAAO,CAAC,yBAAyB,CAAC;UAC9CpB,YAAY,CAACkB,OAAO,CAAC,YAAY,EAAE,IAAI,CAACV,KAAK,CAACW,QAAQ,EAAE,CAAC;QAC7D,CAAC;QACDG,KAAK,EAAEA,KAAK,IAAG;UACb,QAAOA,KAAK,CAACC,MAAM;YACjB,KAAK,GAAG;cAAE;gBACRvB,YAAY,CAACiB,KAAK,EAAE;gBACpB,IAAI,CAACvB,MAAM,CAAC4B,KAAK,CAAC,cAAc,CAAC;;cAClC;YACD,KAAK,GAAG;cAAE;gBACRtB,YAAY,CAACiB,KAAK,EAAE;gBACpB,IAAI,CAACvB,MAAM,CAAC4B,KAAK,CAAC,gBAAgB,CAAC;;cACnC;YACF,KAAK,CAAC;cAAE;gBACN,IAAI,CAAC5B,MAAM,CAAC4B,KAAK,CAAC,wBAAwB,EAAE,EAAE,EAAE;kBAC9CE,OAAO,EAAE;iBACV,CAAC;gBACF;;;cACD;UAAM;QAEX;MAAC,CAAC,CACL;;EAET;EAGAC,KAAK,CAACC,IAAS;IACbC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,IAAI,CAACjC,UAAU,CAACkB,IAAI,CAAC,IAAI,CAACC,GAAG,GAAE,OAAO,EAAEc,IAAI,EAAE;MAACb,eAAe,EAAE;IAAI,CAAC,CAAC,CAACC,SAAS,CAC9E;MAAEC,IAAI,EAAEC,IAAI,IAAG;QACVhB,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACkB,SAAS,CAACL,IAAI,CAAC,CAAC;QAClD,IAAI,CAACtB,MAAM,CAAC0B,OAAO,CAAC,yBAAyB,CAAC;QAC9CpB,YAAY,CAACkB,OAAO,CAAC,YAAY,EAAE,IAAI,CAACV,KAAK,CAACW,QAAQ,EAAE,CAAC;MAC7D,CAAC;MACDG,KAAK,EAAEA,KAAK,IAAG;QACbK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;QAChB,QAAOA,KAAK,CAACC,MAAM;UACjB,KAAK,GAAG;YAAE;cACT,IAAI,CAAC7B,MAAM,CAAC4B,KAAK,CAAC,eAAe,CAAC;;YAClC;UACD,KAAK,GAAG;YACR,IAAI,CAAC5B,MAAM,CAAC4B,KAAK,CAAC,gDAAgD,CAAC;YAAE;UACrE,KAAK,CAAC;YAAE;cACP,IAAI,CAAC5B,MAAM,CAAC4B,KAAK,CAAC,wBAAwB,EAAE,EAAE,EAAE;gBAC9CE,OAAO,EAAE;eACV,CAAC;cACF;;;YACD;QAAM;MAEZ;IAAC,CAAC,CACL;EACF;;AAjFWjC,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAsC,SAAZtC,YAAY;EAAAuC,YAFX;AAAM","names":["Constants","LoginService","constructor","httpClient","toastr","router","BASE_URL","Date","refreshToken","localdata","localStorage","getItem","json","JSON","parse","token","expiresAt","date1","date2","getDay","body","post","url","withCredentials","subscribe","next","data","clear","setItem","toString","success","stringify","error","status","timeOut","login","form","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\pages\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Constants } from 'src/app/models/Constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  url: string = Constants.BASE_URL + \"auth/\"\n\n  date1: Date = new Date();\n  date2: Date = new Date();\n\n  constructor(private httpClient: HttpClient,\n              private toastr: ToastrService,\n              private router: Router) { }\n\n  refreshToken() {\n      var localdata = localStorage.getItem('data');\n      var json = JSON.parse(localdata??\"\");\n      var token = json[\"Token\"];\n      var expiresAt = localStorage.getItem('loggedDate');\n      this.date1 = new Date(expiresAt??\"\");\n      if (this.date2.getDay() - this.date1.getDay() > 0 || expiresAt == null) {\n        var refreshToken = json[\"RefreshToken\"];\n        var body = {\n          \"token\": token,\n          \"refreshToken\": refreshToken\n        }\n\n        this.httpClient.post(this.url+'refresh-user', body, {withCredentials: true}).subscribe(\n              { next: data => {\n                  localStorage.clear();\n                  localStorage.setItem('loggedDate', this.date2.toString());\n                  this.toastr.success('Token updated!');\n                  localStorage.setItem(\"data\", JSON.stringify(data));\n                  this.toastr.success('Successfully logged in!');\n                  localStorage.setItem('loggedDate', this.date2.toString())\n              },\n              error: error => {\n                switch(error.status) {\n                  case 400: {\n                    localStorage.clear();\n                    this.toastr.error(\"Bad request!\")\n                  }break;\n                  case 401: {\n                    localStorage.clear();\n                    this.toastr.error(\"Token expired!\")\n                  } break;\n                  case 0: {\n                    this.toastr.error(\"Internal server error!\", '', {\n                      timeOut: 3000,\n                    });\n                    //this.router.navigate(['/server-error']); \n                  }break;\n                }\n              }}\n          );\n      }\n  }\n\n\n  login(form: any) {\n    console.log(form);\n    this.httpClient.post(this.url +'login', form, {withCredentials: true}).subscribe(\n      { next: data => {\n           localStorage.setItem(\"data\", JSON.stringify(data));\n           this.toastr.success('Successfully logged in!');\n           localStorage.setItem('loggedDate', this.date2.toString())\n       },\n       error: error => {\n         console.log(error);\n           switch(error.status) {\n             case 400: {\n              this.toastr.error(\"Nimadir xato!\");\n             }break;\n             case 401: \n             this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\"); break;\n             case 0: {\n              this.toastr.error(\"Internal server error!\", '', {\n                timeOut: 3000,\n              });\n              //this.router.navigate(['/server-error']); \n            }break;\n           }\n       }}\n   );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}