{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"../helpers/token.service\";\nimport * as i4 from \"@angular/router\";\nexport let TransferService = /*#__PURE__*/(() => {\n  class TransferService {\n    constructor(httpClient, toastr, tokenService, router) {\n      this.httpClient = httpClient;\n      this.toastr = toastr;\n      this.tokenService = tokenService;\n      this.router = router;\n      this.baseUrl = Constants.BASE_URL + 'transfer/';\n      this.pagination = {\n        HasPrevious: false,\n        HasNext: false,\n        TotalCount: 0,\n        PageSize: 10,\n        CurrentPage: 1,\n        TotalPages: 0\n      };\n    }\n    getPaged(pageNumber) {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n      const url = `${this.baseUrl}paged?pageSize=10&pageNumber=${pageNumber}`;\n      return this.httpClient.get(url, {\n        headers,\n        observe: 'response'\n      }).pipe(map(response => {\n        const transfers = response.body;\n        const paginationHeader = response.headers.get('x-pagination');\n        var xpagination = JSON.parse(paginationHeader ?? '');\n        this.initPaginationParams(xpagination);\n        return transfers;\n      }));\n    }\n    initPaginationParams(xpagination) {\n      this.pagination.HasPrevious = xpagination['HasPrevious'];\n      this.pagination.HasNext = xpagination['HasNext'];\n      this.pagination.TotalCount = xpagination['TotalCount'];\n      this.pagination.CurrentPage = xpagination['CurrentPage'];\n      this.pagination.PageSize = xpagination['PageSize'];\n      this.pagination.TotalPages = xpagination['TotalPages'];\n      localStorage.setItem('pagination', JSON.stringify(this.pagination));\n    }\n    getToken() {\n      var localdata = localStorage.getItem('data');\n      var json = JSON.parse(localdata ?? '');\n      return json['Token'];\n    }\n  }\n  TransferService.ɵfac = function TransferService_Factory(t) {\n    return new (t || TransferService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.TokenService), i0.ɵɵinject(i4.Router));\n  };\n  TransferService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransferService,\n    factory: TransferService.ɵfac,\n    providedIn: 'root'\n  });\n  return TransferService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}