{"ast":null,"code":"import { Constants } from 'src/app/models/Constants';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class LoginService {\n  constructor(httpClient, toastr, router) {\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.router = router;\n    this.url = Constants.BASE_URL + 'auth/';\n    this.date1 = new Date();\n    this.date2 = new Date();\n  }\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? '');\n    var token = json['Token'];\n    var expiresAt = localStorage.getItem('loggedDate');\n    this.date1 = new Date(expiresAt ?? '');\n    if (this.date2.getDay() - this.date1.getDay() > 0 || expiresAt == null) {\n      var refreshToken = json['RefreshToken'];\n      var body = {\n        token: token,\n        refreshToken: refreshToken\n      };\n      this.httpClient.post(this.url + 'refresh-user', body, {\n        withCredentials: true\n      }).subscribe({\n        next: data => {\n          localStorage.clear();\n          localStorage.setItem('data', JSON.stringify(data));\n          localStorage.setItem('loggedDate', this.date2.toString());\n          this.toastr.success('Token updated!');\n        },\n        error: error => {\n          switch (error.status) {\n            case 400:\n              {\n                localStorage.clear();\n                this.toastr.error('Bad request!');\n              }\n              break;\n            case 401:\n              {\n                localStorage.clear();\n                this.toastr.error('Token expired!');\n              }\n              break;\n            case 0:\n              {\n                this.toastr.error('Internal server error!', '', {\n                  timeOut: 3000\n                });\n                //this.router.navigate(['/server-error']);\n              }\n\n              break;\n          }\n        }\n      });\n    }\n  }\n  login(form) {\n    console.log(form);\n    this.httpClient.post(this.url + 'login', form, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        var json = JSON.parse(JSON.stringify(data) ?? '');\n        var token = json['Token'];\n        var role = jwt_decode(token)['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n        if (role == 'SELLER') {\n          this.toastr.error(\"Kechirasiz, Admin panelga kirish sotuvchilar uchun ruxsat etilmaydi!\", '', {\n            timeOut: 3000,\n            bodywidth: 330,\n            px\n          });\n          this.router.navigate(['login']);\n        } else {\n          this.toastr.success('Successfully logged in!');\n          localStorage.setItem('loggedDate', this.date2.toString());\n          localStorage.setItem('data', JSON.stringify(data));\n        }\n      },\n      error: error => {\n        console.log(error);\n        switch (error.status) {\n          case 400:\n            {\n              this.toastr.error('Nimadir xato!');\n            }\n            break;\n          case 401:\n            this.toastr.error(\"Telefon raqam yoki parol noto'g'ri kiritilgan!\");\n            break;\n          case 0:\n            {\n              this.toastr.error('Internal server error!', '', {\n                timeOut: 3000\n              });\n              //this.router.navigate(['/server-error']);\n            }\n\n            break;\n        }\n      }\n    });\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Constants","jwt_decode","LoginService","constructor","httpClient","toastr","router","BASE_URL","Date","refreshToken","localdata","localStorage","getItem","json","JSON","parse","token","expiresAt","date1","date2","getDay","body","post","url","withCredentials","subscribe","next","data","clear","setItem","stringify","toString","success","error","status","timeOut","login","form","console","log","role","bodywidth","px","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\pages\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Constants } from 'src/app/models/Constants';\nimport jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  url: string = Constants.BASE_URL + 'auth/';\n\n  date1: Date = new Date();\n  date2: Date = new Date();\n\n  constructor(\n    private httpClient: HttpClient,\n    private toastr: ToastrService,\n    private router: Router\n  ) {}\n\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? '');\n    var token = json['Token'];\n    var expiresAt = localStorage.getItem('loggedDate');\n    this.date1 = new Date(expiresAt ?? '');\n    if (this.date2.getDay() - this.date1.getDay() > 0 || expiresAt == null) {\n      var refreshToken = json['RefreshToken'];\n      var body = {\n        token: token,\n        refreshToken: refreshToken,\n      };\n\n      this.httpClient\n        .post(this.url + 'refresh-user', body, { withCredentials: true })\n        .subscribe({\n          next: (data) => {\n            localStorage.clear();\n            localStorage.setItem('data', JSON.stringify(data));\n            localStorage.setItem('loggedDate', this.date2.toString());\n            this.toastr.success('Token updated!');\n          },\n          error: (error) => {\n            switch (error.status) {\n              case 400:\n                {\n                  localStorage.clear();\n                  this.toastr.error('Bad request!');\n                }\n                break;\n              case 401:\n                {\n                  localStorage.clear();\n                  this.toastr.error('Token expired!');\n                }\n                break;\n              case 0:\n                {\n                  this.toastr.error('Internal server error!', '', {\n                    timeOut: 3000,\n                  });\n                  //this.router.navigate(['/server-error']);\n                }\n                break;\n            }\n          },\n        });\n    }\n  }\n\n  login(form: any) {\n    console.log(form);\n    this.httpClient\n      .post(this.url + 'login', form, { withCredentials: true })\n      .subscribe({\n        next: (data) => {\n          var json = JSON.parse(JSON.stringify(data) ?? '');\n          var token = json['Token'];\n          var role =\n            jwt_decode<any>(token)[\n              'http://schemas.microsoft.com/ws/2008/06/identity/claims/role'\n            ];\n          if (role == 'SELLER') {\n            this.toastr.error(\n              \"Kechirasiz, Admin panelga kirish sotuvchilar uchun ruxsat etilmaydi!\", '', {\n                  timeOut: 3000,\n                  bodywidth: 330px\n                });\n                this.router.navigate(['login']);\n          } else {\n            this.toastr.success('Successfully logged in!');\n            localStorage.setItem('loggedDate', this.date2.toString());\n          localStorage.setItem('data', JSON.stringify(data));\n          }\n        },\n        error: (error) => {\n          console.log(error);\n          switch (error.status) {\n            case 400:\n              {\n                this.toastr.error('Nimadir xato!');\n              }\n              break;\n            case 401:\n              this.toastr.error(\n                \"Telefon raqam yoki parol noto'g'ri kiritilgan!\"\n              );\n              break;\n            case 0:\n              {\n                this.toastr.error('Internal server error!', '', {\n                  timeOut: 3000,\n                });\n                //this.router.navigate(['/server-error']);\n              }\n              break;\n          }\n        },\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}