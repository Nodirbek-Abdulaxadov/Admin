{"ast":null,"code":"import { Constants } from 'src/app/models/Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = Constants.BASE_URL + \"auth/\";\n  }\n  refreshToken() {\n    var localdata = localStorage.getItem('data');\n    if (localdata) {\n      var json = JSON.parse(localdata ?? \"\");\n      var token = json[\"Token\"];\n      var refreshToken = json[\"RefreshToken\"];\n      var body = {\n        \"token\": token,\n        \"refreshToken\": refreshToken\n      };\n      this.httpClient.post(this.url + 'refresh-user', body, {\n        withCredentials: true\n      }).subscribe({\n        next: data => {\n          localStorage.setItem(\"data\", JSON.stringify(data));\n          console.log(data);\n          return true;\n        },\n        error: error => {\n          console.log(error);\n          return false;\n          //  switch(error.status) {\n          //    case 500: {\n          //       return false;\n          //    }break;\n          //  }\n        }\n      });\n    }\n\n    return false;\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,QAAQ,0BAA0B;;;AAKpD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAF9B,QAAG,GAAWH,SAAS,CAACI,QAAQ,GAAG,OAAO;EAEI;EAE9CC,YAAY;IACZ,IAAIC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAIF,SAAS,EAAE;MACb,IAAIG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAE,EAAE,CAAC;MACpC,IAAIM,KAAK,GAAGH,IAAI,CAAC,OAAO,CAAC;MACzB,IAAIJ,YAAY,GAAGI,IAAI,CAAC,cAAc,CAAC;MACvC,IAAII,IAAI,GAAG;QACT,OAAO,EAAED,KAAK;QACd,cAAc,EAAEP;OACjB;MAED,IAAI,CAACF,UAAU,CAACW,IAAI,CAAC,IAAI,CAACC,GAAG,GAAC,cAAc,EAAEF,IAAI,EAAE;QAACG,eAAe,EAAE;MAAI,CAAC,CAAC,CAACC,SAAS,CACpF;QAAEC,IAAI,EAAEC,IAAI,IAAG;UACVZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;UACjDG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;UAClB,OAAO,IAAI;QACf,CAAC;QACDK,KAAK,EAAEA,KAAK,IAAG;UACVF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;UAClB,OAAO,KAAK;UACd;UACA;UACA;UACA;UACA;QACH;MAAC,CAAC,CACL;;;IAGD,OAAO,KAAK;EACb;;AApCWvB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAwB,SAAZxB,YAAY;EAAAyB,YAFX;AAAM","names":["Constants","LoginService","constructor","httpClient","BASE_URL","refreshToken","localdata","localStorage","getItem","json","JSON","parse","token","body","post","url","withCredentials","subscribe","next","data","setItem","stringify","console","log","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\pages\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Constants } from 'src/app/models/Constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  url: string = Constants.BASE_URL + \"auth/\"\n\n  constructor(private httpClient: HttpClient) { }\n\n  refreshToken() {\n  var localdata = localStorage.getItem('data');\n  if (localdata) {\n    var json = JSON.parse(localdata??\"\");\n    var token = json[\"Token\"];\n    var refreshToken = json[\"RefreshToken\"];\n    var body = {\n      \"token\": token,\n      \"refreshToken\": refreshToken\n    }\n\n    this.httpClient.post(this.url+'refresh-user', body, {withCredentials: true}).subscribe(\n      { next: data => {\n           localStorage.setItem(\"data\", JSON.stringify(data));\n            console.log(data)\n           return true;\n       },\n       error: error => {\n            console.log(error);\n            return false;\n          //  switch(error.status) {\n          //    case 500: {\n          //       return false;\n          //    }break;\n          //  }\n       }}\n   );\n  }\n\n   return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}