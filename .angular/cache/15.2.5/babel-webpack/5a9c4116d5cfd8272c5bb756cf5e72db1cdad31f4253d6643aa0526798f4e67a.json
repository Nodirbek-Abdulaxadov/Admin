{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Constants } from 'src/app/models/Constants';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"../helpers/token.service\";\nimport * as i4 from \"@angular/router\";\nexport class SalesService {\n  constructor(httpClient, toastr, tokenService, router) {\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.tokenService = tokenService;\n    this.router = router;\n    this.baseUrl = Constants.BASE_URL + 'receipt/';\n    this.pagination = {\n      HasPrevious: false,\n      HasNext: false,\n      TotalCount: 0,\n      PageSize: 10,\n      CurrentPage: 1,\n      TotalPages: 0\n    };\n  }\n  getById(id) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n    return this.httpClient.get(this.baseUrl + id, {\n      headers\n    });\n  }\n  getPaged(pageNumber) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n    const url = `${this.baseUrl}paged?pageSize=10&pageNumber=${pageNumber}`;\n    return this.httpClient.get(url, {\n      headers,\n      observe: 'response'\n    }).pipe(map(response => {\n      const products = response.body;\n      const paginationHeader = response.headers.get('x-pagination');\n      var xpagination = JSON.parse(paginationHeader ?? '');\n      this.initPaginationParams(xpagination);\n      console.log(products);\n      return products;\n    }));\n  }\n  initPaginationParams(xpagination) {\n    this.pagination.HasPrevious = xpagination['HasPrevious'];\n    this.pagination.HasNext = xpagination['HasNext'];\n    this.pagination.TotalCount = xpagination['TotalCount'];\n    this.pagination.CurrentPage = xpagination['CurrentPage'];\n    this.pagination.PageSize = xpagination['PageSize'];\n    this.pagination.TotalPages = xpagination['TotalPages'];\n    localStorage.setItem('pagination', JSON.stringify(this.pagination));\n  }\n  getToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? '');\n    return json['Token'];\n  }\n}\nSalesService.ɵfac = function SalesService_Factory(t) {\n  return new (t || SalesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.TokenService), i0.ɵɵinject(i4.Router));\n};\nSalesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SalesService,\n  factory: SalesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Constants","map","SalesService","constructor","httpClient","toastr","tokenService","router","BASE_URL","HasPrevious","HasNext","TotalCount","PageSize","CurrentPage","TotalPages","getById","id","headers","set","getToken","get","baseUrl","getPaged","pageNumber","url","observe","pipe","response","products","body","paginationHeader","xpagination","JSON","parse","initPaginationParams","console","log","pagination","localStorage","setItem","stringify","localdata","getItem","json","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Nodirbek\\Desktop\\ZAKAZ\\Admin\\src\\app\\services\\sales\\sales.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { TokenService } from '../helpers/token.service';\nimport { Router } from '@angular/router';\nimport { Constants } from 'src/app/models/Constants';\nimport { Pagination } from 'src/app/models/Pagination';\nimport { Observable, map } from 'rxjs';\nimport { Receipt } from 'src/app/models/Receipt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SalesService {\n  constructor(\n    private httpClient: HttpClient,\n    private toastr: ToastrService,\n    private tokenService: TokenService,\n    private router: Router\n  ) {}\n\n  baseUrl: string = Constants.BASE_URL + 'receipt/';\n\n  public pagination: Pagination = {\n    HasPrevious: false,\n    HasNext: false,\n    TotalCount: 0,\n    PageSize: 10,\n    CurrentPage: 1,\n    TotalPages: 0,\n  };\n\n  getById(id: number): Observable<Receipt> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      `Bearer ${this.getToken()}`\n    );\n    return this.httpClient.get<Receipt>(this.baseUrl + id, { headers });\n  }\n\n  getPaged(pageNumber: number): Observable<Receipt[]> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      `Bearer ${this.getToken()}`\n    );\n\n    const url = `${this.baseUrl}paged?pageSize=10&pageNumber=${pageNumber}`;\n\n    return this.httpClient.get<any>(url, { headers, observe: 'response' }).pipe(\n      map((response) => {\n        const products = response.body as Receipt[];\n        const paginationHeader = response.headers.get('x-pagination');\n        var xpagination = JSON.parse(paginationHeader ?? '');\n        this.initPaginationParams(xpagination);\n        console.log(products)\n        return products;\n      })\n    );\n  }\n\n  initPaginationParams(xpagination: any): void {\n    this.pagination.HasPrevious = xpagination['HasPrevious'];\n    this.pagination.HasNext = xpagination['HasNext'];\n    this.pagination.TotalCount = xpagination['TotalCount'];\n    this.pagination.CurrentPage = xpagination['CurrentPage'];\n    this.pagination.PageSize = xpagination['PageSize'];\n    this.pagination.TotalPages = xpagination['TotalPages'];\n\n    localStorage.setItem('pagination', JSON.stringify(this.pagination))\n  }\n\n  getToken() {\n    var localdata = localStorage.getItem('data');\n    var json = JSON.parse(localdata ?? '');\n    return json['Token'];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}